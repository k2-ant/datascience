<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://blog.kblanchard.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://blog.kblanchard.com/" rel="alternate" type="text/html" /><updated>2021-01-09T17:44:19-06:00</updated><id>https://blog.kblanchard.com/feed.xml</id><title type="html">Kyle’s Notes</title><subtitle>Exploring data</subtitle><entry><title type="html">Garmin Running Data</title><link href="https://blog.kblanchard.com/2020/11/18/Garmin-Running-Data.ipynb" rel="alternate" type="text/html" title="Garmin Running Data" /><published>2020-11-18T00:00:00-06:00</published><updated>2020-11-18T00:00:00-06:00</updated><id>https://blog.kblanchard.com/2020/11/18/Garmin-Running-Data</id><author><name></name></author><summary type="html">{ &quot;cells&quot;: [ { &quot;cell_type&quot;: &quot;markdown&quot;, &quot;metadata&quot;: {}, &quot;source&quot;: [ &quot;# Garmin Year(s) in Review (2017 - 2020)\n&quot;, &quot;&gt; Other services I used provided me a year in review. Have to make my own for Garmin.. and make it a little more interesting. \n&quot;, &quot;\n&quot;, &quot;- toc: true\n&quot;, &quot;- branch: master\n&quot;, &quot;- badges: false\n&quot;, &quot;- comments: false\n&quot;, &quot;- categories: [jupyter, fitness]\n&quot;, &quot;- image: images/some_folder/your_image.png\n&quot;, &quot;- hide: false\n&quot;, &quot;- search_exclude: false&quot; ] }, { &quot;cell_type&quot;: &quot;markdown&quot;, &quot;metadata&quot;: {}, &quot;source&quot;: [ &quot;Very simple exercise in looking at data from my runs that are stored in Garmin. Includes all of my runs up to the end of 2020. \n&quot;, &quot;\n&quot;, &quot;I’m collecting my data directly from Garmin’s website – https://connect.garmin.com/modern/activities, filtering specifically for my running activities. Garmin allows you to export the data directly to .csv.\n&quot;, &quot;\n&quot;, &quot;My goal with looking at this data is to understand the following:\n&quot;, &quot;\n&quot;, &quot;- How did I perform in 2020? \n&quot;, &quot;- What should I aim to improve in 2021?&quot; ] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;execution_count&quot;: 1, &quot;metadata&quot;: {}, &quot;outputs&quot;: [], &quot;source&quot;: [ &quot;#hide\n&quot;, &quot;\n&quot;, &quot;#main packages\n&quot;, &quot;import pandas as pd\n&quot;, &quot;import numpy as np\n&quot;, &quot;import matplotlib.pyplot as plt\n&quot;, &quot;import datetime as dt\n&quot;, &quot;import time\n&quot;, &quot;\n&quot;, &quot;\n&quot;, &quot;#no idea what these are for\n&quot;, &quot;import seaborn as sns #importing seaborn module \n&quot;, &quot;import warnings\n&quot;, &quot;warnings.filterwarnings('ignore') #this will ignore the warnings.it wont display warnings in notebook\n&quot;, &quot;#plt.style.use('fivethirtyeight')\n&quot;, &quot;plt.style.use('ggplot')\n&quot;, &quot;plt.rcParams['figure.figsize']=[6,3]\n&quot;, &quot;plt.rcParams['figure.dpi']=80&quot; ] }, { &quot;cell_type&quot;: &quot;markdown&quot;, &quot;metadata&quot;: {}, &quot;source&quot;: [ &quot;# The Data&quot; ] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;execution_count&quot;: 2, &quot;metadata&quot;: { &quot;scrolled&quot;: true }, &quot;outputs&quot;: [], &quot;source&quot;: [ &quot;#hide\n&quot;, &quot;pd.set_option('display.max_rows', 15)\n&quot;, &quot;pd.set_option('display.max_columns', 15)\n&quot;, &quot;garmin_data = pd.read_csv(\&quot;data/garmin-runs.csv\&quot;)&quot; ] }, { &quot;cell_type&quot;: &quot;markdown&quot;, &quot;metadata&quot;: {}, &quot;source&quot;: [ &quot;## Understanding the Data\n&quot;, &quot;\n&quot;, &quot;First things first, let's get an idea of what the data looks like. &quot; ] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;execution_count&quot;: 3, &quot;metadata&quot;: { &quot;scrolled&quot;: true }, &quot;outputs&quot;: [ { &quot;name&quot;: &quot;stdout&quot;, &quot;output_type&quot;: &quot;stream&quot;, &quot;text&quot;: [ &quot;\n&quot;, &quot;RangeIndex: 392 entries, 0 to 391\n&quot;, &quot;Data columns (total 30 columns):\n&quot;, &quot; # Column Non-Null Count Dtype \n&quot;, &quot;--- ------ -------------- ----- \n&quot;, &quot; 0 Activity Type 392 non-null object \n&quot;, &quot; 1 Date 392 non-null object \n&quot;, &quot; 2 Favorite 392 non-null bool \n&quot;, &quot; 3 Title 392 non-null object \n&quot;, &quot; 4 Distance 392 non-null float64\n&quot;, &quot; 5 Calories 392 non-null object \n&quot;, &quot; 6 Time 392 non-null object \n&quot;, &quot; 7 Avg HR 392 non-null object \n&quot;, &quot; 8 Max HR 392 non-null object \n&quot;, &quot; 9 Aerobic TE 392 non-null object \n&quot;, &quot; 10 Avg Run Cadence 392 non-null object \n&quot;, &quot; 11 Max Run Cadence 392 non-null object \n&quot;, &quot; 12 Avg Pace 392 non-null object \n&quot;, &quot; 13 Best Pace 392 non-null object \n&quot;, &quot; 14 Elev Gain 392 non-null object \n&quot;, &quot; 15 Elev Loss 392 non-null object \n&quot;, &quot; 16 Avg Stride Length 392 non-null float64\n&quot;, &quot; 17 Avg Vertical Ratio 392 non-null float64\n&quot;, &quot; 18 Avg Vertical Oscillation 392 non-null float64\n&quot;, &quot; 19 Training Stress Score® 392 non-null float64\n&quot;, &quot; 20 Grit 392 non-null float64\n&quot;, &quot; 21 Flow 392 non-null float64\n&quot;, &quot; 22 Climb Time 392 non-null object \n&quot;, &quot; 23 Bottom Time 392 non-null object \n&quot;, &quot; 24 Min Temp 392 non-null float64\n&quot;, &quot; 25 Surface Interval 392 non-null object \n&quot;, &quot; 26 Decompression 392 non-null object \n&quot;, &quot; 27 Best Lap Time 392 non-null object \n&quot;, &quot; 28 Number of Laps 392 non-null object \n&quot;, &quot; 29 Max Temp 392 non-null float64\n&quot;, &quot;dtypes: bool(1), float64(9), object(20)\n&quot;, &quot;memory usage: 89.3+ KB\n&quot; ] } ], &quot;source&quot;: [ &quot;garmin_data.info(verbose=True)&quot; ] }, { &quot;cell_type&quot;: &quot;markdown&quot;, &quot;metadata&quot;: {}, &quot;source&quot;: [ &quot;### Prep the Data\n&quot;, &quot;\n&quot;, &quot;Looking at the initial review, a lot of these fields are objects when I really want to capture them as integers or floats. There are also some simplified fields I'll want to have in my analysis:\n&quot;, &quot;- Year\n&quot;, &quot;- Month\n&quot;, &quot;- Day of the Week\n&quot;, &quot;- Time of Day (Morning, Afternoon, Late Afternoon, Evening)\n&quot;, &quot;\n&quot;, &quot;In addition, I'll want to standardize some elements so they are bit easier for me to manage and analyze.\n&quot;, &quot;\n&quot;, &quot;- Pace is currently stored as minutes per mile. I will change to miles per hour.\n&quot;, &quot;- Time is currently stored as HH:MM. I will change this to total elapsed minutes. \n&quot;, &quot;\n&quot;, &quot;Finally, Garmin does not have null values. In areas where the value is null, Garmin captures it as \&quot;--\&quot;. I will clean this up and make these null.\n&quot;, &quot;\n&quot;, &quot;This results in the following: &quot; ] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;execution_count&quot;: 4, &quot;metadata&quot;: {}, &quot;outputs&quot;: [], &quot;source&quot;: [ &quot;#function to remove \&quot;--\&quot;\n&quot;, &quot;def clean_na(val, pace=False):\n&quot;, &quot; if pace == True:\n&quot;, &quot; newval = val.replace(\&quot;--\&quot;, \&quot;99:99\&quot;)\n&quot;, &quot; else:\n&quot;, &quot; newval = val.replace(\&quot;--\&quot;, '0').replace(',','')\n&quot;, &quot; return str(newval)\n&quot;, &quot;\n&quot;, &quot;#function to determine \n&quot;, &quot;def time_of_day(date):\n&quot;, &quot; morn_start = dt.time(6,00)\n&quot;, &quot; afternoon_start = dt.time(12,00)\n&quot;, &quot; late_afternoon_start = dt.time(15,00)\n&quot;, &quot; evening_start = dt.time(18,00)\n&quot;, &quot; \n&quot;, &quot; time_of_run = dt.datetime.time(date)\n&quot;, &quot; \n&quot;, &quot; if evening_start \n&quot;, &quot;RangeIndex: 392 entries, 0 to 391\n&quot;, &quot;Data columns (total 21 columns):\n&quot;, &quot; # Column Non-Null Count Dtype \n&quot;, &quot;--- ------ -------------- ----- \n&quot;, &quot; 0 Activity Type 392 non-null object \n&quot;, &quot; 1 Date 392 non-null datetime64[ns]\n&quot;, &quot; 2 Title 392 non-null object \n&quot;, &quot; 3 Distance 392 non-null float64 \n&quot;, &quot; 4 Calories 392 non-null int64 \n&quot;, &quot; 5 Minutes Elapsed 392 non-null float64 \n&quot;, &quot; 6 Avg HR 392 non-null int64 \n&quot;, &quot; 7 Max HR 392 non-null int64 \n&quot;, &quot; 8 Aerobic TE 392 non-null float64 \n&quot;, &quot; 9 Avg Run Cadence 392 non-null int64 \n&quot;, &quot; 10 Max Run Cadence 392 non-null int64 \n&quot;, &quot; 11 Avg Pace 392 non-null float64 \n&quot;, &quot; 12 Best Pace 392 non-null float64 \n&quot;, &quot; 13 Elev Gain 392 non-null int64 \n&quot;, &quot; 14 Elev Loss 392 non-null int64 \n&quot;, &quot; 15 Avg Stride Length 392 non-null float64 \n&quot;, &quot; 16 Climb Time 392 non-null float64 \n&quot;, &quot; 17 Day of Week 392 non-null object \n&quot;, &quot; 18 Year 392 non-null int64 \n&quot;, &quot; 19 Month 392 non-null int64 \n&quot;, &quot; 20 Time of Day 311 non-null object \n&quot;, &quot;dtypes: datetime64[ns](1), float64(7), int64(9), object(4)\n&quot;, &quot;memory usage: 64.4+ KB\n&quot; ] } ], &quot;source&quot;: [ &quot;garmin_data.info(verbose=True)&quot; ] }, { &quot;cell_type&quot;: &quot;markdown&quot;, &quot;metadata&quot;: {}, &quot;source&quot;: [ &quot;Looking much better. Now that we have our data set up, let's dive into some questions that I'm curious about. \n&quot;, &quot;\n&quot;, &quot;- What have my running habits looked like over the years?\n&quot;, &quot;- What has been my average overall pace?\n&quot;, &quot;- Which time / day / month do I run the most?\n&quot;, &quot;- Which time / day / month am I most effective?\n&quot;, &quot;\n&quot;, &quot;Other questions I'm curious about...\n&quot;, &quot;\n&quot;, &quot;- How many total calories have I burned? (in pounds)\n&quot;, &quot;- Has my average heart rate gotten \&quot;better\&quot; over time? (My hypothesis is that, as I get healthier, I can maintain a faster pace with a lower heart rate)\n&quot;, &quot;\n&quot;, &quot;Have a lot of other questions.. especially related to \&quot;Best Pace\&quot; and how reliablem that data is. For example, can I predict which days I'll have my best pace?&quot; ] }, { &quot;cell_type&quot;: &quot;markdown&quot;, &quot;metadata&quot;: {}, &quot;source&quot;: [ &quot;## Number of Runs &quot; ] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;execution_count&quot;: 6, &quot;metadata&quot;: {}, &quot;outputs&quot;: [ { &quot;data&quot;: { &quot;text/html&quot;: [ &quot; Month 1 2 3 4 5 6 7 8 9 10 11 12 Year \n&quot;, &quot; \n&quot;, &quot; 2017\n&quot;, &quot; 0\n&quot;, &quot; 0\n&quot;, &quot; 0\n&quot;, &quot; 0\n&quot;, &quot; 0\n&quot;, &quot; 0\n&quot;, &quot; 10\n&quot;, &quot; 10\n&quot;, &quot; 11\n&quot;, &quot; 12\n&quot;, &quot; 5\n&quot;, &quot; 7\n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot; 2018\n&quot;, &quot; 8\n&quot;, &quot; 25\n&quot;, &quot; 30\n&quot;, &quot; 27\n&quot;, &quot; 21\n&quot;, &quot; 23\n&quot;, &quot; 13\n&quot;, &quot; 10\n&quot;, &quot; 7\n&quot;, &quot; 0\n&quot;, &quot; 0\n&quot;, &quot; 1\n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot; 2019\n&quot;, &quot; 0\n&quot;, &quot; 0\n&quot;, &quot; 2\n&quot;, &quot; 0\n&quot;, &quot; 0\n&quot;, &quot; 0\n&quot;, &quot; 13\n&quot;, &quot; 10\n&quot;, &quot; 15\n&quot;, &quot; 25\n&quot;, &quot; 13\n&quot;, &quot; 2\n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot; 2020\n&quot;, &quot; 8\n&quot;, &quot; 1\n&quot;, &quot; 0\n&quot;, &quot; 0\n&quot;, &quot; 0\n&quot;, &quot; 0\n&quot;, &quot; 0\n&quot;, &quot; 22\n&quot;, &quot; 20\n&quot;, &quot; 9\n&quot;, &quot; 18\n&quot;, &quot; 10\n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot; 2021\n&quot;, &quot; 4\n&quot;, &quot; 0\n&quot;, &quot; 0\n&quot;, &quot; 0\n&quot;, &quot; 0\n&quot;, &quot; 0\n&quot;, &quot; 0\n&quot;, &quot; 0\n&quot;, &quot; 0\n&quot;, &quot; 0\n&quot;, &quot; 0\n&quot;, &quot; 0\n&quot;, &quot; \n&quot;, &quot; &quot; ], &quot;text/plain&quot;: [ &quot;&quot; ] }, &quot;execution_count&quot;: 6, &quot;metadata&quot;: {}, &quot;output_type&quot;: &quot;execute_result&quot; } ], &quot;source&quot;: [ &quot;num_runs = garmin_data.pivot_table('Title', index=\&quot;Year\&quot;, columns = 'Month', aggfunc='count', fill_value=0)\n&quot;, &quot;\n&quot;, &quot;num_runs.style.background_gradient(cmap='Blues')&quot; ] }, { &quot;cell_type&quot;: &quot;markdown&quot;, &quot;metadata&quot;: {}, &quot;source&quot;: [ &quot;Looking at this, it's clear where I ran the most. 2018 was a great year.. I do seem to have \&quot;periods\&quot; of running.\n&quot;, &quot;\n&quot;, &quot;- Period 1: July 2017 - September 2018\n&quot;, &quot;- Period 2: July 2019 - January 2020\n&quot;, &quot;- Period 3: August 2020 - Today\n&quot;, &quot;\n&quot;, &quot;Looking at this, I'd assume that I was the best runner in Period 1. But let's look at my data in a different way. Some other metrics that are important to understand: my average pace, my average distance and my monthly distance.&quot; ] }, { &quot;cell_type&quot;: &quot;markdown&quot;, &quot;metadata&quot;: {}, &quot;source&quot;: [ &quot;## Avg Pace (mph)&quot; ] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;execution_count&quot;: 7, &quot;metadata&quot;: {}, &quot;outputs&quot;: [ { &quot;data&quot;: { &quot;text/html&quot;: [ &quot;\n&quot;, &quot;\n&quot;, &quot;\n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot; Month\n&quot;, &quot; 1\n&quot;, &quot; 2\n&quot;, &quot; 3\n&quot;, &quot; 4\n&quot;, &quot; 5\n&quot;, &quot; 6\n&quot;, &quot; 7\n&quot;, &quot; 8\n&quot;, &quot; 9\n&quot;, &quot; 10\n&quot;, &quot; 11\n&quot;, &quot; 12\n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot; Year\n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot; 2017\n&quot;, &quot; 0.00\n&quot;, &quot; 0.00\n&quot;, &quot; 0.00\n&quot;, &quot; 0.0\n&quot;, &quot; 0.00\n&quot;, &quot; 0.00\n&quot;, &quot; 5.32\n&quot;, &quot; 5.60\n&quot;, &quot; 5.63\n&quot;, &quot; 5.32\n&quot;, &quot; 5.59\n&quot;, &quot; 5.26\n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot; 2018\n&quot;, &quot; 5.58\n&quot;, &quot; 5.82\n&quot;, &quot; 5.60\n&quot;, &quot; 6.0\n&quot;, &quot; 5.79\n&quot;, &quot; 5.63\n&quot;, &quot; 5.68\n&quot;, &quot; 5.53\n&quot;, &quot; 5.89\n&quot;, &quot; 0.00\n&quot;, &quot; 0.00\n&quot;, &quot; 4.46\n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot; 2019\n&quot;, &quot; 0.00\n&quot;, &quot; 0.00\n&quot;, &quot; 4.53\n&quot;, &quot; 0.0\n&quot;, &quot; 0.00\n&quot;, &quot; 0.00\n&quot;, &quot; 5.08\n&quot;, &quot; 5.40\n&quot;, &quot; 5.35\n&quot;, &quot; 5.47\n&quot;, &quot; 5.59\n&quot;, &quot; 5.76\n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot; 2020\n&quot;, &quot; 5.06\n&quot;, &quot; 5.48\n&quot;, &quot; 0.00\n&quot;, &quot; 0.0\n&quot;, &quot; 0.00\n&quot;, &quot; 0.00\n&quot;, &quot; 0.00\n&quot;, &quot; 5.06\n&quot;, &quot; 5.36\n&quot;, &quot; 5.64\n&quot;, &quot; 5.69\n&quot;, &quot; 5.49\n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot; 2021\n&quot;, &quot; 6.04\n&quot;, &quot; 0.00\n&quot;, &quot; 0.00\n&quot;, &quot; 0.0\n&quot;, &quot; 0.00\n&quot;, &quot; 0.00\n&quot;, &quot; 0.00\n&quot;, &quot; 0.00\n&quot;, &quot; 0.00\n&quot;, &quot; 0.00\n&quot;, &quot; 0.00\n&quot;, &quot; 0.00\n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot;\n&quot;, &quot;&quot; ], &quot;text/plain&quot;: [ &quot;Month 1 2 3 4 5 6 7 8 9 10 11 12\n&quot;, &quot;Year \n&quot;, &quot;2017 0.00 0.00 0.00 0.0 0.00 0.00 5.32 5.60 5.63 5.32 5.59 5.26\n&quot;, &quot;2018 5.58 5.82 5.60 6.0 5.79 5.63 5.68 5.53 5.89 0.00 0.00 4.46\n&quot;, &quot;2019 0.00 0.00 4.53 0.0 0.00 0.00 5.08 5.40 5.35 5.47 5.59 5.76\n&quot;, &quot;2020 5.06 5.48 0.00 0.0 0.00 0.00 0.00 5.06 5.36 5.64 5.69 5.49\n&quot;, &quot;2021 6.04 0.00 0.00 0.0 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00&quot; ] }, &quot;execution_count&quot;: 7, &quot;metadata&quot;: {}, &quot;output_type&quot;: &quot;execute_result&quot; } ], &quot;source&quot;: [ &quot;avg_pace = np.round(garmin_data.pivot_table('Avg Pace', index=\&quot;Year\&quot;, columns = 'Month', aggfunc='mean', fill_value=0, margins=False),2)\n&quot;, &quot;\n&quot;, &quot;avg_pace&quot; ] }, { &quot;cell_type&quot;: &quot;markdown&quot;, &quot;metadata&quot;: {}, &quot;source&quot;: [ &quot;## Total Distance (miles)&quot; ] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;execution_count&quot;: 8, &quot;metadata&quot;: {}, &quot;outputs&quot;: [ { &quot;data&quot;: { &quot;text/html&quot;: [ &quot;\n&quot;, &quot;\n&quot;, &quot;\n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot; Month\n&quot;, &quot; 1\n&quot;, &quot; 2\n&quot;, &quot; 3\n&quot;, &quot; 4\n&quot;, &quot; 5\n&quot;, &quot; 6\n&quot;, &quot; 7\n&quot;, &quot; 8\n&quot;, &quot; 9\n&quot;, &quot; 10\n&quot;, &quot; 11\n&quot;, &quot; 12\n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot; Year\n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot; 2017\n&quot;, &quot; 0.00\n&quot;, &quot; 0.00\n&quot;, &quot; 0.00\n&quot;, &quot; 0.00\n&quot;, &quot; 0.00\n&quot;, &quot; 0.00\n&quot;, &quot; 37.42\n&quot;, &quot; 24.54\n&quot;, &quot; 36.78\n&quot;, &quot; 35.27\n&quot;, &quot; 12.68\n&quot;, &quot; 15.29\n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot; 2018\n&quot;, &quot; 17.18\n&quot;, &quot; 56.84\n&quot;, &quot; 55.44\n&quot;, &quot; 55.48\n&quot;, &quot; 42.02\n&quot;, &quot; 50.95\n&quot;, &quot; 33.57\n&quot;, &quot; 20.36\n&quot;, &quot; 8.97\n&quot;, &quot; 0.00\n&quot;, &quot; 0.00\n&quot;, &quot; 3.20\n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot; 2019\n&quot;, &quot; 0.00\n&quot;, &quot; 0.00\n&quot;, &quot; 4.17\n&quot;, &quot; 0.00\n&quot;, &quot; 0.00\n&quot;, &quot; 0.00\n&quot;, &quot; 24.93\n&quot;, &quot; 22.86\n&quot;, &quot; 33.06\n&quot;, &quot; 44.25\n&quot;, &quot; 19.47\n&quot;, &quot; 3.12\n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot; 2020\n&quot;, &quot; 25.14\n&quot;, &quot; 2.00\n&quot;, &quot; 0.00\n&quot;, &quot; 0.00\n&quot;, &quot; 0.00\n&quot;, &quot; 0.00\n&quot;, &quot; 0.00\n&quot;, &quot; 76.43\n&quot;, &quot; 80.49\n&quot;, &quot; 41.23\n&quot;, &quot; 56.40\n&quot;, &quot; 30.43\n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot; 2021\n&quot;, &quot; 11.97\n&quot;, &quot; 0.00\n&quot;, &quot; 0.00\n&quot;, &quot; 0.00\n&quot;, &quot; 0.00\n&quot;, &quot; 0.00\n&quot;, &quot; 0.00\n&quot;, &quot; 0.00\n&quot;, &quot; 0.00\n&quot;, &quot; 0.00\n&quot;, &quot; 0.00\n&quot;, &quot; 0.00\n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot;\n&quot;, &quot;&quot; ], &quot;text/plain&quot;: [ &quot;Month 1 2 3 4 5 6 7 8 9 10 \\\n&quot;, &quot;Year \n&quot;, &quot;2017 0.00 0.00 0.00 0.00 0.00 0.00 37.42 24.54 36.78 35.27 \n&quot;, &quot;2018 17.18 56.84 55.44 55.48 42.02 50.95 33.57 20.36 8.97 0.00 \n&quot;, &quot;2019 0.00 0.00 4.17 0.00 0.00 0.00 24.93 22.86 33.06 44.25 \n&quot;, &quot;2020 25.14 2.00 0.00 0.00 0.00 0.00 0.00 76.43 80.49 41.23 \n&quot;, &quot;2021 11.97 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 \n&quot;, &quot;\n&quot;, &quot;Month 11 12 \n&quot;, &quot;Year \n&quot;, &quot;2017 12.68 15.29 \n&quot;, &quot;2018 0.00 3.20 \n&quot;, &quot;2019 19.47 3.12 \n&quot;, &quot;2020 56.40 30.43 \n&quot;, &quot;2021 0.00 0.00 &quot; ] }, &quot;execution_count&quot;: 8, &quot;metadata&quot;: {}, &quot;output_type&quot;: &quot;execute_result&quot; } ], &quot;source&quot;: [ &quot;total_distance = garmin_data.pivot_table('Distance', index=\&quot;Year\&quot;, columns = 'Month', aggfunc='sum', fill_value=0, margins=False)\n&quot;, &quot;total_distance&quot; ] }, { &quot;cell_type&quot;: &quot;markdown&quot;, &quot;metadata&quot;: {}, &quot;source&quot;: [ &quot;## Average Distance (miles)&quot; ] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;execution_count&quot;: 9, &quot;metadata&quot;: {}, &quot;outputs&quot;: [], &quot;source&quot;: [ &quot;avg_distance = np.round(garmin_data.pivot_table('Distance', index=\&quot;Year\&quot;, columns = 'Month', aggfunc='mean', fill_value=0, margins=False), 2)&quot; ] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;execution_count&quot;: 10, &quot;metadata&quot;: {}, &quot;outputs&quot;: [ { &quot;data&quot;: { &quot;text/plain&quot;: [ &quot;(0.0, 82.0)&quot; ] }, &quot;execution_count&quot;: 10, &quot;metadata&quot;: {}, &quot;output_type&quot;: &quot;execute_result&quot; }, { &quot;data&quot;: { &quot;image/png&quot;: &quot;\n&quot;, &quot;text/plain&quot;: [ &quot;&quot; ] }, &quot;metadata&quot;: {}, &quot;output_type&quot;: &quot;display_data&quot; } ], &quot;source&quot;: [ &quot;month = 10\n&quot;, &quot;year = 2020\n&quot;, &quot;\n&quot;, &quot;num_runs.loc[year][month]\n&quot;, &quot;avg_pace.loc[year][month]\n&quot;, &quot;total_distance.loc[year][month]\n&quot;, &quot;avg_distance.loc[year][month]\n&quot;, &quot;\n&quot;, &quot;fig, ax = plt.subplots()\n&quot;, &quot;ax.scatter(total_distance, avg_pace)\n&quot;, &quot;ax.set_ylim([4.2,6.2])\n&quot;, &quot;ax.set_xlim([0,82])\n&quot;, &quot;#avg_pace.loc[year]&quot; ] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;execution_count&quot;: 11, &quot;metadata&quot;: {}, &quot;outputs&quot;: [ { &quot;data&quot;: { &quot;text/html&quot;: [ &quot;\n&quot;, &quot;\n&quot;, &quot;\n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot; Time of Day\n&quot;, &quot; Afternoon\n&quot;, &quot; Late Afternoon\n&quot;, &quot; Morning\n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot; Day of Week\n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot; Friday\n&quot;, &quot; 2.83\n&quot;, &quot; 1.58\n&quot;, &quot; 2.13\n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot; Monday\n&quot;, &quot; 2.12\n&quot;, &quot; 2.72\n&quot;, &quot; 2.06\n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot; Saturday\n&quot;, &quot; 3.40\n&quot;, &quot; 4.46\n&quot;, &quot; 2.93\n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot; Sunday\n&quot;, &quot; 3.31\n&quot;, &quot; 2.13\n&quot;, &quot; 4.03\n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot; Thursday\n&quot;, &quot; 1.48\n&quot;, &quot; 2.85\n&quot;, &quot; 2.23\n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot; Tuesday\n&quot;, &quot; 0.00\n&quot;, &quot; 2.45\n&quot;, &quot; 2.49\n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot; Wednesday\n&quot;, &quot; 0.00\n&quot;, &quot; 2.47\n&quot;, &quot; 1.78\n&quot;, &quot; \n&quot;, &quot; \n&quot;, &quot;\n&quot;, &quot;&quot; ], &quot;text/plain&quot;: [ &quot;Time of Day Afternoon Late Afternoon Morning\n&quot;, &quot;Day of Week \n&quot;, &quot;Friday 2.83 1.58 2.13\n&quot;, &quot;Monday 2.12 2.72 2.06\n&quot;, &quot;Saturday 3.40 4.46 2.93\n&quot;, &quot;Sunday 3.31 2.13 4.03\n&quot;, &quot;Thursday 1.48 2.85 2.23\n&quot;, &quot;Tuesday 0.00 2.45 2.49\n&quot;, &quot;Wednesday 0.00 2.47 1.78&quot; ] }, &quot;execution_count&quot;: 11, &quot;metadata&quot;: {}, &quot;output_type&quot;: &quot;execute_result&quot; } ], &quot;source&quot;: [ &quot;np.round(garmin_data.pivot_table('Distance', index=\&quot;Day of Week\&quot;, columns = 'Time of Day', aggfunc='mean', fill_value=0, margins=False), 2)\n&quot;, &quot;\n&quot; ] }, { &quot;cell_type&quot;: &quot;markdown&quot;, &quot;metadata&quot;: {}, &quot;source&quot;: [ &quot;# Potential Questions to Ask\n&quot;, &quot;\n&quot;, &quot;## Which day &amp; time am I the fastest?\n&quot;, &quot;\n&quot;, &quot;## Am I most effective in the morning or afternoon?\n&quot;, &quot;\n&quot;, &quot;## How many calories to I burn per minute, while running?\n&quot;, &quot;\n&quot;, &quot;## If I were to continue my trend of faster pace, when could I run a 7 minute mile?\n&quot;, &quot;\n&quot;, &quot;## What is the relationship between weekly mileage and weekly pace change?\n&quot;, &quot;\n&quot; ] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;execution_count&quot;: 12, &quot;metadata&quot;: {}, &quot;outputs&quot;: [ { &quot;ename&quot;: &quot;NameError&quot;, &quot;evalue&quot;: &quot;name 'data' is not defined&quot;, &quot;output_type&quot;: &quot;error&quot;, &quot;traceback&quot;: [ &quot;\u001b[0;31m---------------------------------------------------------------------------\u001b[0m&quot;, &quot;\u001b[0;31mNameError\u001b[0m Traceback (most recent call last)&quot;, &quot;\u001b[0;32m\u001b[0m in \u001b[0;36m\u001b[0;34m\u001b[0m\n\u001b[1;32m 1\u001b[0m \u001b[0msns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----&gt; 2\u001b[0;31m \u001b[0mdata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpivot_table\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Title'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindex\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\&quot;Day of Week\&quot;\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolumns\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\&quot;Time of Day\&quot;\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maggfunc\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'count'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbar\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m 3\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpivot_table\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Title'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindex\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\&quot;Year\&quot;\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolumns\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\&quot;Day of Week\&quot;\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maggfunc\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'count'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m 4\u001b[0m \u001b[0mplot\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msc\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m 5\u001b[0m \u001b[0;31m### Which day do I run the most?\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n&quot;, &quot;\u001b[0;31mNameError\u001b[0m: name 'data' is not defined&quot; ] } ], &quot;source&quot;: [ &quot;\n&quot;, &quot;sns.set()\n&quot;, &quot;data.pivot_table('Title', index=\&quot;Day of Week\&quot;, columns=\&quot;Time of Day\&quot;, aggfunc='count').plot.bar()\n&quot;, &quot;data.pivot_table('Title', index=\&quot;Year\&quot;, columns=\&quot;Day of Week\&quot;, aggfunc='count')\n&quot;, &quot;plot.sc\n&quot;, &quot;### Which day do I run the most?\n&quot;, &quot;\n&quot;, &quot;#data.pivot_table('Avg Pace', index=data['Year'], columns=\&quot;Time of Day\&quot;, aggfunc='mean')&quot; ] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;execution_count&quot;: null, &quot;metadata&quot;: {}, &quot;outputs&quot;: [], &quot;source&quot;: [ &quot;garmin_data.pivot_table('Title', index=\&quot;Year\&quot;, columns = 'Month', aggfunc='count', fill_value=0)&quot; ] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;execution_count&quot;: null, &quot;metadata&quot;: {}, &quot;outputs&quot;: [], &quot;source&quot;: [ &quot;#3 main periods of running recorded in Garmin. \n&quot;, &quot;# 7/2017 - 11/2018\n&quot;, &quot;period_1 = [datetime.date(2017, 7,1), datetime.date(2018,10,13)]\n&quot;, &quot;# ax.set_xlim([datetime.date(2017, 7,1), datetime.date(2018,11,1)])\n&quot;, &quot;# 7/2019 - 12/2019\n&quot;, &quot;period_2 = [datetime.date(2019, 7,1), datetime.date(2019,12,1)]\n&quot;, &quot;# ax.set_xlim([datetime.date(2019, 7,1), datetime.date(2019,12,1)])\n&quot;, &quot;# 1/2020 - 12/2020\n&quot;, &quot;period_3 = [datetime.date(2020, 8,1), dt.datetime.now()]\n&quot;, &quot;#ax.set_xlim([datetime.date(2020, 8,1), datetime.date(2020,11,1)])\n&quot; ] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;execution_count&quot;: null, &quot;metadata&quot;: {}, &quot;outputs&quot;: [], &quot;source&quot;: [] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;execution_count&quot;: null, &quot;metadata&quot;: {}, &quot;outputs&quot;: [], &quot;source&quot;: [ &quot;data.pivot_table('Distance', index=\&quot;Year\&quot;, columns = 'Month', aggfunc='sum', fill_value=0)&quot; ] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;execution_count&quot;: null, &quot;metadata&quot;: {}, &quot;outputs&quot;: [], &quot;source&quot;: [ &quot;data.pivot_table('Avg Pace', index=\&quot;Year\&quot;, columns = 'Month', aggfunc='mean', fill_value=0)&quot; ] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;execution_count&quot;: null, &quot;metadata&quot;: {}, &quot;outputs&quot;: [], &quot;source&quot;: [] } ], &quot;metadata&quot;: { &quot;kernelspec&quot;: { &quot;display_name&quot;: &quot;Python 3&quot;, &quot;language&quot;: &quot;python&quot;, &quot;name&quot;: &quot;python3&quot; }, &quot;language_info&quot;: { &quot;codemirror_mode&quot;: { &quot;name&quot;: &quot;ipython&quot;, &quot;version&quot;: 3 }, &quot;file_extension&quot;: &quot;.py&quot;, &quot;mimetype&quot;: &quot;text/x-python&quot;, &quot;name&quot;: &quot;python&quot;, &quot;nbconvert_exporter&quot;: &quot;python&quot;, &quot;pygments_lexer&quot;: &quot;ipython3&quot;, &quot;version&quot;: &quot;3.7.0&quot; } }, &quot;nbformat&quot;: 4, &quot;nbformat_minor&quot;: 4 }</summary></entry></feed>