{
  
    
        "post0": {
            "title": "Garmin Running Data",
            "content": "{ “cells”: [ { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “# Garmin Year(s) in Review (2017 - 2020) n”, “&gt; Other services I used provided me a year in review. Have to make my own for Garmin.. and make it a little more interesting. n”, “ n”, “- toc: true n”, “- branch: master n”, “- badges: false n”, “- comments: false n”, “- categories: [jupyter, fitness] n”, “- image: images/some_folder/your_image.png n”, “- hide: false n”, “- search_exclude: false” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “Very simple exercise in looking at data from my runs that are stored in Garmin. Includes all of my runs up to the end of 2020. n”, “ n”, “I’m collecting my data directly from Garmin’s website – https://connect.garmin.com/modern/activities, filtering specifically for my running activities. Garmin allows you to export the data directly to .csv. n”, “ n”, “My goal with looking at this data is to understand the following: n”, “ n”, “- How did I perform in 2020? n”, “- What should I aim to improve in 2021?” ] }, { “cell_type”: “code”, “execution_count”: 1, “metadata”: {}, “outputs”: [], “source”: [ “#hide n”, “ n”, “#main packages n”, “import pandas as pd n”, “import numpy as np n”, “import matplotlib.pyplot as plt n”, “import datetime as dt n”, “import time n”, “ n”, “ n”, “#no idea what these are for n”, “import seaborn as sns #importing seaborn module n”, “import warnings n”, “warnings.filterwarnings(‘ignore’) #this will ignore the warnings.it wont display warnings in notebook n”, “#plt.style.use(‘fivethirtyeight’) n”, “plt.style.use(‘ggplot’) n”, “plt.rcParams[‘figure.figsize’]=[6,3] n”, “plt.rcParams[‘figure.dpi’]=80” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “# The Data” ] }, { “cell_type”: “code”, “execution_count”: 2, “metadata”: { “scrolled”: true }, “outputs”: [], “source”: [ “#hide n”, “pd.set_option(‘display.max_rows’, 15) n”, “pd.set_option(‘display.max_columns’, 15) n”, “garmin_data = pd.read_csv(&quot;data/garmin-runs.csv&quot;)” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “## Understanding the Data n”, “ n”, “First things first, let’s get an idea of what the data looks like. “ ] }, { “cell_type”: “code”, “execution_count”: 3, “metadata”: { “scrolled”: true }, “outputs”: [ { “name”: “stdout”, “output_type”: “stream”, “text”: [ “&lt;class ‘pandas.core.frame.DataFrame’&gt; n”, “RangeIndex: 392 entries, 0 to 391 n”, “Data columns (total 30 columns): n”, “ # Column Non-Null Count Dtype n”, “— —— ————– —– n”, “ 0 Activity Type 392 non-null object n”, “ 1 Date 392 non-null object n”, “ 2 Favorite 392 non-null bool n”, “ 3 Title 392 non-null object n”, “ 4 Distance 392 non-null float64 n”, “ 5 Calories 392 non-null object n”, “ 6 Time 392 non-null object n”, “ 7 Avg HR 392 non-null object n”, “ 8 Max HR 392 non-null object n”, “ 9 Aerobic TE 392 non-null object n”, “ 10 Avg Run Cadence 392 non-null object n”, “ 11 Max Run Cadence 392 non-null object n”, “ 12 Avg Pace 392 non-null object n”, “ 13 Best Pace 392 non-null object n”, “ 14 Elev Gain 392 non-null object n”, “ 15 Elev Loss 392 non-null object n”, “ 16 Avg Stride Length 392 non-null float64 n”, “ 17 Avg Vertical Ratio 392 non-null float64 n”, “ 18 Avg Vertical Oscillation 392 non-null float64 n”, “ 19 Training Stress Score® 392 non-null float64 n”, “ 20 Grit 392 non-null float64 n”, “ 21 Flow 392 non-null float64 n”, “ 22 Climb Time 392 non-null object n”, “ 23 Bottom Time 392 non-null object n”, “ 24 Min Temp 392 non-null float64 n”, “ 25 Surface Interval 392 non-null object n”, “ 26 Decompression 392 non-null object n”, “ 27 Best Lap Time 392 non-null object n”, “ 28 Number of Laps 392 non-null object n”, “ 29 Max Temp 392 non-null float64 n”, “dtypes: bool(1), float64(9), object(20) n”, “memory usage: 89.3+ KB n” ] } ], “source”: [ “garmin_data.info(verbose=True)” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “### Prep the Data n”, “ n”, “Looking at the initial review, a lot of these fields are objects when I really want to capture them as integers or floats. There are also some simplified fields I’ll want to have in my analysis: n”, “- Year n”, “- Month n”, “- Day of the Week n”, “- Time of Day (Morning, Afternoon, Late Afternoon, Evening) n”, “ n”, “In addition, I’ll want to standardize some elements so they are bit easier for me to manage and analyze. n”, “ n”, “- Pace is currently stored as minutes per mile. I will change to miles per hour. n”, “- Time is currently stored as HH:MM. I will change this to total elapsed minutes. n”, “ n”, “Finally, Garmin does not have null values. In areas where the value is null, Garmin captures it as &quot;–&quot;. I will clean this up and make these null. n”, “ n”, “This results in the following: “ ] }, { “cell_type”: “code”, “execution_count”: 4, “metadata”: {}, “outputs”: [], “source”: [ “#function to remove &quot;–&quot; n”, “def clean_na(val, pace=False): n”, “ if pace == True: n”, “ newval = val.replace(&quot;–&quot;, &quot;99:99&quot;) n”, “ else: n”, “ newval = val.replace(&quot;–&quot;, ‘0’).replace(‘,’,’’) n”, “ return str(newval) n”, “ n”, “#function to determine n”, “def time_of_day(date): n”, “ morn_start = dt.time(6,00) n”, “ afternoon_start = dt.time(12,00) n”, “ late_afternoon_start = dt.time(15,00) n”, “ evening_start = dt.time(18,00) n”, “ n”, “ time_of_run = dt.datetime.time(date) n”, “ n”, “ if evening_start &lt;= time_of_run &lt; morn_start: n”, “ return &quot;Evening&quot; n”, “ elif morn_start &lt;= time_of_run &lt; afternoon_start: n”, “ return &quot;Morning&quot; n”, “ elif afternoon_start &lt;= time_of_run &lt; late_afternoon_start: n”, “ return &quot;Afternoon&quot; n”, “ elif late_afternoon_start &lt;= time_of_run &lt; evening_start: n”, “ return &quot;Late Afternoon&quot; n”, “ n”, “ n”, “ n”, “ n”, “#fix data types n”, “garmin_data[‘Date’] = garmin_data[‘Date’].astype(‘datetime64’) n”, “garmin_data[‘Day of Week’] = garmin_data[‘Date’].dt.day_name() n”, “garmin_data[‘Favorite’] = garmin_data[‘Favorite’].astype(‘bool’) n”, “garmin_data[‘Calories’] = garmin_data[‘Calories’].str.replace(‘,’,’’) n”, “garmin_data[‘Calories’] = garmin_data[‘Calories’].apply(clean_na).astype(int) n”, “garmin_data[‘Avg HR’] = garmin_data[‘Avg HR’].apply(clean_na).astype(int) n”, “garmin_data[‘Max HR’] = garmin_data[‘Max HR’].apply(clean_na).astype(int) n”, “garmin_data[‘Aerobic TE’] = garmin_data[‘Aerobic TE’].apply(clean_na).astype(float) n”, “garmin_data[‘Avg Run Cadence’] = garmin_data[‘Avg Run Cadence’].apply(clean_na).astype(int) n”, “garmin_data[‘Max Run Cadence’] = garmin_data[‘Max Run Cadence’].apply(clean_na).astype(int) n”, “garmin_data[‘Elev Gain’] = garmin_data[‘Elev Gain’].apply(clean_na).astype(int) n”, “garmin_data[‘Elev Loss’] = garmin_data[‘Elev Loss’].apply(clean_na).astype(int) n”, “ n”, “#converting my total elapsed time to minutes, rounding &amp; adjust column name n”, “garmin_data.rename(columns = {‘Time’ : ‘Minutes Elapsed’}, inplace= True) n”, “garmin_data[‘Minutes Elapsed’] = garmin_data[‘Minutes Elapsed’].str.split(‘:’).apply(lambda x: int(x[0]) * 60 + int(x[1]) + round(float(x[2])/60,1)) n”, “garmin_data[‘Climb Time’] = garmin_data[‘Climb Time’].str.split(‘:’).apply(lambda x: int(x[0]) + float(x[1])/60) n”, “ n”, “#convert pace to mph n”, “garmin_data[‘Avg Pace’] = garmin_data[‘Avg Pace’].apply(clean_na, pace=True).str.split(‘:’).apply(lambda x: 60/(int(x[0]) + int(x[1])/60)) n”, “garmin_data[‘Best Pace’] = garmin_data[‘Best Pace’].apply(clean_na, pace=True).str.split(‘:’).apply(lambda x: 60/(int(x[0]) + int(x[1])/60)) n”, “ n”, “#get date attributes n”, “garmin_data[‘Year’] = garmin_data[‘Date’].apply(lambda x: x.year) n”, “garmin_data[‘Month’] = garmin_data[‘Date’].apply(lambda x: x.month) n”, “garmin_data[‘Time of Day’] = garmin_data[‘Date’].apply(time_of_day) n”, “ n”, “# clean up unused date n”, “garmin_data = garmin_data.drop(columns=[‘Favorite’, ‘Avg Vertical Ratio’, ‘Avg Vertical Oscillation’, ‘Training Stress Score®’, ‘Grit’, ‘Flow’,’Bottom Time’, ‘Min Temp’, ‘Surface Interval’, ‘Decompression’, ‘Best Lap Time’, ‘Number of Laps’, ‘Max Temp’]) n” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “Let’s take a look at the data again, now that we’ve set it up.” ] }, { “cell_type”: “code”, “execution_count”: 5, “metadata”: {}, “outputs”: [ { “name”: “stdout”, “output_type”: “stream”, “text”: [ “&lt;class ‘pandas.core.frame.DataFrame’&gt; n”, “RangeIndex: 392 entries, 0 to 391 n”, “Data columns (total 21 columns): n”, “ # Column Non-Null Count Dtype n”, “— —— ————– —– n”, “ 0 Activity Type 392 non-null object n”, “ 1 Date 392 non-null datetime64[ns] n”, “ 2 Title 392 non-null object n”, “ 3 Distance 392 non-null float64 n”, “ 4 Calories 392 non-null int64 n”, “ 5 Minutes Elapsed 392 non-null float64 n”, “ 6 Avg HR 392 non-null int64 n”, “ 7 Max HR 392 non-null int64 n”, “ 8 Aerobic TE 392 non-null float64 n”, “ 9 Avg Run Cadence 392 non-null int64 n”, “ 10 Max Run Cadence 392 non-null int64 n”, “ 11 Avg Pace 392 non-null float64 n”, “ 12 Best Pace 392 non-null float64 n”, “ 13 Elev Gain 392 non-null int64 n”, “ 14 Elev Loss 392 non-null int64 n”, “ 15 Avg Stride Length 392 non-null float64 n”, “ 16 Climb Time 392 non-null float64 n”, “ 17 Day of Week 392 non-null object n”, “ 18 Year 392 non-null int64 n”, “ 19 Month 392 non-null int64 n”, “ 20 Time of Day 311 non-null object n”, “dtypes: datetime64ns, float64(7), int64(9), object(4) n”, “memory usage: 64.4+ KB n” ] } ], “source”: [ “garmin_data.info(verbose=True)” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “Looking much better. Now that we have our data set up, let’s dive into some questions that I’m curious about. n”, “ n”, “- What have my running habits looked like over the years? n”, “- What has been my average overall pace? n”, “- Which time / day / month do I run the most? n”, “- Which time / day / month am I most effective? n”, “ n”, “Other questions I’m curious about… n”, “ n”, “- How many total calories have I burned? (in pounds) n”, “- Has my average heart rate gotten &quot;better&quot; over time? (My hypothesis is that, as I get healthier, I can maintain a faster pace with a lower heart rate) n”, “ n”, “Have a lot of other questions.. especially related to &quot;Best Pace&quot; and how reliablem that data is. For example, can I predict which days I’ll have my best pace?” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “## Number of Runs “ ] }, { “cell_type”: “code”, “execution_count”: 6, “metadata”: {}, “outputs”: [ { “data”: { “text/html”: [ “&lt;style type=&quot;text/css&quot; &gt; n”, “#T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow0_col0,#T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow0_col1,#T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow0_col2,#T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow0_col3,#T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow0_col4,#T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow0_col5,#T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow1_col9,#T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow1_col10,#T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow2_col0,#T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow2_col1,#T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow2_col3,#T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow2_col4,#T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow2_col5,#T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow3_col2,#T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow3_col3,#T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow3_col4,#T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow3_col5,#T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow3_col6,#T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow4_col1,#T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow4_col2,#T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow4_col3,#T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow4_col4,#T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow4_col5,#T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow4_col6,#T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow4_col7,#T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow4_col8,#T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow4_col9,#T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow4_col10,#T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow4_col11{ n”, “ background-color: #f7fbff; n”, “ color: #000000; n”, “ }#T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow0_col6{ n”, “ background-color: #1d6cb1; n”, “ color: #f1f1f1; n”, “ }#T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow0_col7,#T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow1_col7,#T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow2_col7{ n”, “ background-color: #7db8da; n”, “ color: #000000; n”, “ }#T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow0_col8{ n”, “ background-color: #5ba3d0; n”, “ color: #000000; n”, “ }#T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow0_col9{ n”, “ background-color: #74b3d8; n”, “ color: #000000; n”, “ }#T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow0_col10{ n”, “ background-color: #bdd7ec; n”, “ color: #000000; n”, “ }#T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow0_col11{ n”, “ background-color: #2e7ebc; n”, “ color: #000000; n”, “ }#T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow1_col0,#T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow1_col1,#T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow1_col2,#T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow1_col3,#T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow1_col4,#T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow1_col5,#T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow1_col6,#T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow2_col6,#T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow2_col9,#T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow3_col0,#T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow3_col7,#T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow3_col8,#T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow3_col10,#T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow3_col11{ n”, “ background-color: #08306b; n”, “ color: #f1f1f1; n”, “ }#T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow1_col8{ n”, “ background-color: #a6cee4; n”, “ color: #000000; n”, “ }#T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow1_col11{ n”, “ background-color: #e3eef9; n”, “ color: #000000; n”, “ }#T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow2_col2{ n”, “ background-color: #eaf2fb; n”, “ color: #000000; n”, “ }#T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow2_col8{ n”, “ background-color: #2070b4; n”, “ color: #f1f1f1; n”, “ }#T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow2_col10{ n”, “ background-color: #2979b9; n”, “ color: #000000; n”, “ }#T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow2_col11{ n”, “ background-color: #d0e1f2; n”, “ color: #000000; n”, “ }#T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow3_col1{ n”, “ background-color: #eff6fc; n”, “ color: #000000; n”, “ }#T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow3_col9{ n”, “ background-color: #a3cce3; n”, “ color: #000000; n”, “ }#T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow4_col0{ n”, “ background-color: #6aaed6; n”, “ color: #000000; n”, “ }&lt;/style&gt;&lt;table id=&quot;T_a76b1c2c_52d3_11eb_bb47_f2189830aa4b&quot; &gt;&lt;thead&gt; &lt;tr&gt; &lt;th class=&quot;index_name level0&quot; &gt;Month&lt;/th&gt; &lt;th class=&quot;col_heading level0 col0&quot; &gt;1&lt;/th&gt; &lt;th class=&quot;col_heading level0 col1&quot; &gt;2&lt;/th&gt; &lt;th class=&quot;col_heading level0 col2&quot; &gt;3&lt;/th&gt; &lt;th class=&quot;col_heading level0 col3&quot; &gt;4&lt;/th&gt; &lt;th class=&quot;col_heading level0 col4&quot; &gt;5&lt;/th&gt; &lt;th class=&quot;col_heading level0 col5&quot; &gt;6&lt;/th&gt; &lt;th class=&quot;col_heading level0 col6&quot; &gt;7&lt;/th&gt; &lt;th class=&quot;col_heading level0 col7&quot; &gt;8&lt;/th&gt; &lt;th class=&quot;col_heading level0 col8&quot; &gt;9&lt;/th&gt; &lt;th class=&quot;col_heading level0 col9&quot; &gt;10&lt;/th&gt; &lt;th class=&quot;col_heading level0 col10&quot; &gt;11&lt;/th&gt; &lt;th class=&quot;col_heading level0 col11&quot; &gt;12&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th class=&quot;index_name level0&quot; &gt;Year&lt;/th&gt; &lt;th class=&quot;blank&quot; &gt;&lt;/th&gt; &lt;th class=&quot;blank&quot; &gt;&lt;/th&gt; &lt;th class=&quot;blank&quot; &gt;&lt;/th&gt; &lt;th class=&quot;blank&quot; &gt;&lt;/th&gt; &lt;th class=&quot;blank&quot; &gt;&lt;/th&gt; &lt;th class=&quot;blank&quot; &gt;&lt;/th&gt; &lt;th class=&quot;blank&quot; &gt;&lt;/th&gt; &lt;th class=&quot;blank&quot; &gt;&lt;/th&gt; &lt;th class=&quot;blank&quot; &gt;&lt;/th&gt; &lt;th class=&quot;blank&quot; &gt;&lt;/th&gt; &lt;th class=&quot;blank&quot; &gt;&lt;/th&gt; &lt;th class=&quot;blank&quot; &gt;&lt;/th&gt; &lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt; n”, “ &lt;tr&gt; n”, “ &lt;th id=&quot;T_a76b1c2c_52d3_11eb_bb47_f2189830aa4blevel0_row0&quot; class=&quot;row_heading level0 row0&quot; &gt;2017&lt;/th&gt; n”, “ &lt;td id=&quot;T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow0_col0&quot; class=&quot;data row0 col0&quot; &gt;0&lt;/td&gt; n”, “ &lt;td id=&quot;T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow0_col1&quot; class=&quot;data row0 col1&quot; &gt;0&lt;/td&gt; n”, “ &lt;td id=&quot;T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow0_col2&quot; class=&quot;data row0 col2&quot; &gt;0&lt;/td&gt; n”, “ &lt;td id=&quot;T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow0_col3&quot; class=&quot;data row0 col3&quot; &gt;0&lt;/td&gt; n”, “ &lt;td id=&quot;T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow0_col4&quot; class=&quot;data row0 col4&quot; &gt;0&lt;/td&gt; n”, “ &lt;td id=&quot;T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow0_col5&quot; class=&quot;data row0 col5&quot; &gt;0&lt;/td&gt; n”, “ &lt;td id=&quot;T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow0_col6&quot; class=&quot;data row0 col6&quot; &gt;10&lt;/td&gt; n”, “ &lt;td id=&quot;T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow0_col7&quot; class=&quot;data row0 col7&quot; &gt;10&lt;/td&gt; n”, “ &lt;td id=&quot;T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow0_col8&quot; class=&quot;data row0 col8&quot; &gt;11&lt;/td&gt; n”, “ &lt;td id=&quot;T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow0_col9&quot; class=&quot;data row0 col9&quot; &gt;12&lt;/td&gt; n”, “ &lt;td id=&quot;T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow0_col10&quot; class=&quot;data row0 col10&quot; &gt;5&lt;/td&gt; n”, “ &lt;td id=&quot;T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow0_col11&quot; class=&quot;data row0 col11&quot; &gt;7&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th id=&quot;T_a76b1c2c_52d3_11eb_bb47_f2189830aa4blevel0_row1&quot; class=&quot;row_heading level0 row1&quot; &gt;2018&lt;/th&gt; n”, “ &lt;td id=&quot;T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow1_col0&quot; class=&quot;data row1 col0&quot; &gt;8&lt;/td&gt; n”, “ &lt;td id=&quot;T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow1_col1&quot; class=&quot;data row1 col1&quot; &gt;25&lt;/td&gt; n”, “ &lt;td id=&quot;T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow1_col2&quot; class=&quot;data row1 col2&quot; &gt;30&lt;/td&gt; n”, “ &lt;td id=&quot;T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow1_col3&quot; class=&quot;data row1 col3&quot; &gt;27&lt;/td&gt; n”, “ &lt;td id=&quot;T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow1_col4&quot; class=&quot;data row1 col4&quot; &gt;21&lt;/td&gt; n”, “ &lt;td id=&quot;T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow1_col5&quot; class=&quot;data row1 col5&quot; &gt;23&lt;/td&gt; n”, “ &lt;td id=&quot;T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow1_col6&quot; class=&quot;data row1 col6&quot; &gt;13&lt;/td&gt; n”, “ &lt;td id=&quot;T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow1_col7&quot; class=&quot;data row1 col7&quot; &gt;10&lt;/td&gt; n”, “ &lt;td id=&quot;T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow1_col8&quot; class=&quot;data row1 col8&quot; &gt;7&lt;/td&gt; n”, “ &lt;td id=&quot;T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow1_col9&quot; class=&quot;data row1 col9&quot; &gt;0&lt;/td&gt; n”, “ &lt;td id=&quot;T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow1_col10&quot; class=&quot;data row1 col10&quot; &gt;0&lt;/td&gt; n”, “ &lt;td id=&quot;T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow1_col11&quot; class=&quot;data row1 col11&quot; &gt;1&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th id=&quot;T_a76b1c2c_52d3_11eb_bb47_f2189830aa4blevel0_row2&quot; class=&quot;row_heading level0 row2&quot; &gt;2019&lt;/th&gt; n”, “ &lt;td id=&quot;T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow2_col0&quot; class=&quot;data row2 col0&quot; &gt;0&lt;/td&gt; n”, “ &lt;td id=&quot;T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow2_col1&quot; class=&quot;data row2 col1&quot; &gt;0&lt;/td&gt; n”, “ &lt;td id=&quot;T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow2_col2&quot; class=&quot;data row2 col2&quot; &gt;2&lt;/td&gt; n”, “ &lt;td id=&quot;T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow2_col3&quot; class=&quot;data row2 col3&quot; &gt;0&lt;/td&gt; n”, “ &lt;td id=&quot;T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow2_col4&quot; class=&quot;data row2 col4&quot; &gt;0&lt;/td&gt; n”, “ &lt;td id=&quot;T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow2_col5&quot; class=&quot;data row2 col5&quot; &gt;0&lt;/td&gt; n”, “ &lt;td id=&quot;T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow2_col6&quot; class=&quot;data row2 col6&quot; &gt;13&lt;/td&gt; n”, “ &lt;td id=&quot;T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow2_col7&quot; class=&quot;data row2 col7&quot; &gt;10&lt;/td&gt; n”, “ &lt;td id=&quot;T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow2_col8&quot; class=&quot;data row2 col8&quot; &gt;15&lt;/td&gt; n”, “ &lt;td id=&quot;T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow2_col9&quot; class=&quot;data row2 col9&quot; &gt;25&lt;/td&gt; n”, “ &lt;td id=&quot;T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow2_col10&quot; class=&quot;data row2 col10&quot; &gt;13&lt;/td&gt; n”, “ &lt;td id=&quot;T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow2_col11&quot; class=&quot;data row2 col11&quot; &gt;2&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th id=&quot;T_a76b1c2c_52d3_11eb_bb47_f2189830aa4blevel0_row3&quot; class=&quot;row_heading level0 row3&quot; &gt;2020&lt;/th&gt; n”, “ &lt;td id=&quot;T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow3_col0&quot; class=&quot;data row3 col0&quot; &gt;8&lt;/td&gt; n”, “ &lt;td id=&quot;T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow3_col1&quot; class=&quot;data row3 col1&quot; &gt;1&lt;/td&gt; n”, “ &lt;td id=&quot;T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow3_col2&quot; class=&quot;data row3 col2&quot; &gt;0&lt;/td&gt; n”, “ &lt;td id=&quot;T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow3_col3&quot; class=&quot;data row3 col3&quot; &gt;0&lt;/td&gt; n”, “ &lt;td id=&quot;T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow3_col4&quot; class=&quot;data row3 col4&quot; &gt;0&lt;/td&gt; n”, “ &lt;td id=&quot;T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow3_col5&quot; class=&quot;data row3 col5&quot; &gt;0&lt;/td&gt; n”, “ &lt;td id=&quot;T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow3_col6&quot; class=&quot;data row3 col6&quot; &gt;0&lt;/td&gt; n”, “ &lt;td id=&quot;T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow3_col7&quot; class=&quot;data row3 col7&quot; &gt;22&lt;/td&gt; n”, “ &lt;td id=&quot;T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow3_col8&quot; class=&quot;data row3 col8&quot; &gt;20&lt;/td&gt; n”, “ &lt;td id=&quot;T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow3_col9&quot; class=&quot;data row3 col9&quot; &gt;9&lt;/td&gt; n”, “ &lt;td id=&quot;T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow3_col10&quot; class=&quot;data row3 col10&quot; &gt;18&lt;/td&gt; n”, “ &lt;td id=&quot;T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow3_col11&quot; class=&quot;data row3 col11&quot; &gt;10&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th id=&quot;T_a76b1c2c_52d3_11eb_bb47_f2189830aa4blevel0_row4&quot; class=&quot;row_heading level0 row4&quot; &gt;2021&lt;/th&gt; n”, “ &lt;td id=&quot;T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow4_col0&quot; class=&quot;data row4 col0&quot; &gt;4&lt;/td&gt; n”, “ &lt;td id=&quot;T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow4_col1&quot; class=&quot;data row4 col1&quot; &gt;0&lt;/td&gt; n”, “ &lt;td id=&quot;T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow4_col2&quot; class=&quot;data row4 col2&quot; &gt;0&lt;/td&gt; n”, “ &lt;td id=&quot;T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow4_col3&quot; class=&quot;data row4 col3&quot; &gt;0&lt;/td&gt; n”, “ &lt;td id=&quot;T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow4_col4&quot; class=&quot;data row4 col4&quot; &gt;0&lt;/td&gt; n”, “ &lt;td id=&quot;T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow4_col5&quot; class=&quot;data row4 col5&quot; &gt;0&lt;/td&gt; n”, “ &lt;td id=&quot;T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow4_col6&quot; class=&quot;data row4 col6&quot; &gt;0&lt;/td&gt; n”, “ &lt;td id=&quot;T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow4_col7&quot; class=&quot;data row4 col7&quot; &gt;0&lt;/td&gt; n”, “ &lt;td id=&quot;T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow4_col8&quot; class=&quot;data row4 col8&quot; &gt;0&lt;/td&gt; n”, “ &lt;td id=&quot;T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow4_col9&quot; class=&quot;data row4 col9&quot; &gt;0&lt;/td&gt; n”, “ &lt;td id=&quot;T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow4_col10&quot; class=&quot;data row4 col10&quot; &gt;0&lt;/td&gt; n”, “ &lt;td id=&quot;T_a76b1c2c_52d3_11eb_bb47_f2189830aa4brow4_col11&quot; class=&quot;data row4 col11&quot; &gt;0&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;/tbody&gt;&lt;/table&gt;” ], “text/plain”: [ “&lt;pandas.io.formats.style.Styler at 0x1310beb00&gt;” ] }, “execution_count”: 6, “metadata”: {}, “output_type”: “execute_result” } ], “source”: [ “num_runs = garmin_data.pivot_table(‘Title’, index=&quot;Year&quot;, columns = ‘Month’, aggfunc=’count’, fill_value=0) n”, “ n”, “num_runs.style.background_gradient(cmap=’Blues’)” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “Looking at this, it’s clear where I ran the most. 2018 was a great year.. I do seem to have &quot;periods&quot; of running. n”, “ n”, “- Period 1: July 2017 - September 2018 n”, “- Period 2: July 2019 - January 2020 n”, “- Period 3: August 2020 - Today n”, “ n”, “Looking at this, I’d assume that I was the best runner in Period 1. But let’s look at my data in a different way. Some other metrics that are important to understand: my average pace, my average distance and my monthly distance.” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “## Avg Pace (mph)” ] }, { “cell_type”: “code”, “execution_count”: 7, “metadata”: {}, “outputs”: [ { “data”: { “text/html”: [ “&lt;div&gt; n”, “ n”, “&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt; n”, “ &lt;thead&gt; n”, “ &lt;tr style=&quot;text-align: right;&quot;&gt; n”, “ &lt;th&gt;Month&lt;/th&gt; n”, “ &lt;th&gt;1&lt;/th&gt; n”, “ &lt;th&gt;2&lt;/th&gt; n”, “ &lt;th&gt;3&lt;/th&gt; n”, “ &lt;th&gt;4&lt;/th&gt; n”, “ &lt;th&gt;5&lt;/th&gt; n”, “ &lt;th&gt;6&lt;/th&gt; n”, “ &lt;th&gt;7&lt;/th&gt; n”, “ &lt;th&gt;8&lt;/th&gt; n”, “ &lt;th&gt;9&lt;/th&gt; n”, “ &lt;th&gt;10&lt;/th&gt; n”, “ &lt;th&gt;11&lt;/th&gt; n”, “ &lt;th&gt;12&lt;/th&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;Year&lt;/th&gt; n”, “ &lt;th&gt;&lt;/th&gt; n”, “ &lt;th&gt;&lt;/th&gt; n”, “ &lt;th&gt;&lt;/th&gt; n”, “ &lt;th&gt;&lt;/th&gt; n”, “ &lt;th&gt;&lt;/th&gt; n”, “ &lt;th&gt;&lt;/th&gt; n”, “ &lt;th&gt;&lt;/th&gt; n”, “ &lt;th&gt;&lt;/th&gt; n”, “ &lt;th&gt;&lt;/th&gt; n”, “ &lt;th&gt;&lt;/th&gt; n”, “ &lt;th&gt;&lt;/th&gt; n”, “ &lt;th&gt;&lt;/th&gt; n”, “ &lt;/tr&gt; n”, “ &lt;/thead&gt; n”, “ &lt;tbody&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;2017&lt;/th&gt; n”, “ &lt;td&gt;0.00&lt;/td&gt; n”, “ &lt;td&gt;0.00&lt;/td&gt; n”, “ &lt;td&gt;0.00&lt;/td&gt; n”, “ &lt;td&gt;0.0&lt;/td&gt; n”, “ &lt;td&gt;0.00&lt;/td&gt; n”, “ &lt;td&gt;0.00&lt;/td&gt; n”, “ &lt;td&gt;5.32&lt;/td&gt; n”, “ &lt;td&gt;5.60&lt;/td&gt; n”, “ &lt;td&gt;5.63&lt;/td&gt; n”, “ &lt;td&gt;5.32&lt;/td&gt; n”, “ &lt;td&gt;5.59&lt;/td&gt; n”, “ &lt;td&gt;5.26&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;2018&lt;/th&gt; n”, “ &lt;td&gt;5.58&lt;/td&gt; n”, “ &lt;td&gt;5.82&lt;/td&gt; n”, “ &lt;td&gt;5.60&lt;/td&gt; n”, “ &lt;td&gt;6.0&lt;/td&gt; n”, “ &lt;td&gt;5.79&lt;/td&gt; n”, “ &lt;td&gt;5.63&lt;/td&gt; n”, “ &lt;td&gt;5.68&lt;/td&gt; n”, “ &lt;td&gt;5.53&lt;/td&gt; n”, “ &lt;td&gt;5.89&lt;/td&gt; n”, “ &lt;td&gt;0.00&lt;/td&gt; n”, “ &lt;td&gt;0.00&lt;/td&gt; n”, “ &lt;td&gt;4.46&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;2019&lt;/th&gt; n”, “ &lt;td&gt;0.00&lt;/td&gt; n”, “ &lt;td&gt;0.00&lt;/td&gt; n”, “ &lt;td&gt;4.53&lt;/td&gt; n”, “ &lt;td&gt;0.0&lt;/td&gt; n”, “ &lt;td&gt;0.00&lt;/td&gt; n”, “ &lt;td&gt;0.00&lt;/td&gt; n”, “ &lt;td&gt;5.08&lt;/td&gt; n”, “ &lt;td&gt;5.40&lt;/td&gt; n”, “ &lt;td&gt;5.35&lt;/td&gt; n”, “ &lt;td&gt;5.47&lt;/td&gt; n”, “ &lt;td&gt;5.59&lt;/td&gt; n”, “ &lt;td&gt;5.76&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;2020&lt;/th&gt; n”, “ &lt;td&gt;5.06&lt;/td&gt; n”, “ &lt;td&gt;5.48&lt;/td&gt; n”, “ &lt;td&gt;0.00&lt;/td&gt; n”, “ &lt;td&gt;0.0&lt;/td&gt; n”, “ &lt;td&gt;0.00&lt;/td&gt; n”, “ &lt;td&gt;0.00&lt;/td&gt; n”, “ &lt;td&gt;0.00&lt;/td&gt; n”, “ &lt;td&gt;5.06&lt;/td&gt; n”, “ &lt;td&gt;5.36&lt;/td&gt; n”, “ &lt;td&gt;5.64&lt;/td&gt; n”, “ &lt;td&gt;5.69&lt;/td&gt; n”, “ &lt;td&gt;5.49&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;2021&lt;/th&gt; n”, “ &lt;td&gt;6.04&lt;/td&gt; n”, “ &lt;td&gt;0.00&lt;/td&gt; n”, “ &lt;td&gt;0.00&lt;/td&gt; n”, “ &lt;td&gt;0.0&lt;/td&gt; n”, “ &lt;td&gt;0.00&lt;/td&gt; n”, “ &lt;td&gt;0.00&lt;/td&gt; n”, “ &lt;td&gt;0.00&lt;/td&gt; n”, “ &lt;td&gt;0.00&lt;/td&gt; n”, “ &lt;td&gt;0.00&lt;/td&gt; n”, “ &lt;td&gt;0.00&lt;/td&gt; n”, “ &lt;td&gt;0.00&lt;/td&gt; n”, “ &lt;td&gt;0.00&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;/tbody&gt; n”, “&lt;/table&gt; n”, “&lt;/div&gt;” ], “text/plain”: [ “Month 1 2 3 4 5 6 7 8 9 10 11 12 n”, “Year n”, “2017 0.00 0.00 0.00 0.0 0.00 0.00 5.32 5.60 5.63 5.32 5.59 5.26 n”, “2018 5.58 5.82 5.60 6.0 5.79 5.63 5.68 5.53 5.89 0.00 0.00 4.46 n”, “2019 0.00 0.00 4.53 0.0 0.00 0.00 5.08 5.40 5.35 5.47 5.59 5.76 n”, “2020 5.06 5.48 0.00 0.0 0.00 0.00 0.00 5.06 5.36 5.64 5.69 5.49 n”, “2021 6.04 0.00 0.00 0.0 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00” ] }, “execution_count”: 7, “metadata”: {}, “output_type”: “execute_result” } ], “source”: [ “avg_pace = np.round(garmin_data.pivot_table(‘Avg Pace’, index=&quot;Year&quot;, columns = ‘Month’, aggfunc=’mean’, fill_value=0, margins=False),2) n”, “ n”, “avg_pace” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “## Total Distance (miles)” ] }, { “cell_type”: “code”, “execution_count”: 8, “metadata”: {}, “outputs”: [ { “data”: { “text/html”: [ “&lt;div&gt; n”, “ n”, “&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt; n”, “ &lt;thead&gt; n”, “ &lt;tr style=&quot;text-align: right;&quot;&gt; n”, “ &lt;th&gt;Month&lt;/th&gt; n”, “ &lt;th&gt;1&lt;/th&gt; n”, “ &lt;th&gt;2&lt;/th&gt; n”, “ &lt;th&gt;3&lt;/th&gt; n”, “ &lt;th&gt;4&lt;/th&gt; n”, “ &lt;th&gt;5&lt;/th&gt; n”, “ &lt;th&gt;6&lt;/th&gt; n”, “ &lt;th&gt;7&lt;/th&gt; n”, “ &lt;th&gt;8&lt;/th&gt; n”, “ &lt;th&gt;9&lt;/th&gt; n”, “ &lt;th&gt;10&lt;/th&gt; n”, “ &lt;th&gt;11&lt;/th&gt; n”, “ &lt;th&gt;12&lt;/th&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;Year&lt;/th&gt; n”, “ &lt;th&gt;&lt;/th&gt; n”, “ &lt;th&gt;&lt;/th&gt; n”, “ &lt;th&gt;&lt;/th&gt; n”, “ &lt;th&gt;&lt;/th&gt; n”, “ &lt;th&gt;&lt;/th&gt; n”, “ &lt;th&gt;&lt;/th&gt; n”, “ &lt;th&gt;&lt;/th&gt; n”, “ &lt;th&gt;&lt;/th&gt; n”, “ &lt;th&gt;&lt;/th&gt; n”, “ &lt;th&gt;&lt;/th&gt; n”, “ &lt;th&gt;&lt;/th&gt; n”, “ &lt;th&gt;&lt;/th&gt; n”, “ &lt;/tr&gt; n”, “ &lt;/thead&gt; n”, “ &lt;tbody&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;2017&lt;/th&gt; n”, “ &lt;td&gt;0.00&lt;/td&gt; n”, “ &lt;td&gt;0.00&lt;/td&gt; n”, “ &lt;td&gt;0.00&lt;/td&gt; n”, “ &lt;td&gt;0.00&lt;/td&gt; n”, “ &lt;td&gt;0.00&lt;/td&gt; n”, “ &lt;td&gt;0.00&lt;/td&gt; n”, “ &lt;td&gt;37.42&lt;/td&gt; n”, “ &lt;td&gt;24.54&lt;/td&gt; n”, “ &lt;td&gt;36.78&lt;/td&gt; n”, “ &lt;td&gt;35.27&lt;/td&gt; n”, “ &lt;td&gt;12.68&lt;/td&gt; n”, “ &lt;td&gt;15.29&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;2018&lt;/th&gt; n”, “ &lt;td&gt;17.18&lt;/td&gt; n”, “ &lt;td&gt;56.84&lt;/td&gt; n”, “ &lt;td&gt;55.44&lt;/td&gt; n”, “ &lt;td&gt;55.48&lt;/td&gt; n”, “ &lt;td&gt;42.02&lt;/td&gt; n”, “ &lt;td&gt;50.95&lt;/td&gt; n”, “ &lt;td&gt;33.57&lt;/td&gt; n”, “ &lt;td&gt;20.36&lt;/td&gt; n”, “ &lt;td&gt;8.97&lt;/td&gt; n”, “ &lt;td&gt;0.00&lt;/td&gt; n”, “ &lt;td&gt;0.00&lt;/td&gt; n”, “ &lt;td&gt;3.20&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;2019&lt;/th&gt; n”, “ &lt;td&gt;0.00&lt;/td&gt; n”, “ &lt;td&gt;0.00&lt;/td&gt; n”, “ &lt;td&gt;4.17&lt;/td&gt; n”, “ &lt;td&gt;0.00&lt;/td&gt; n”, “ &lt;td&gt;0.00&lt;/td&gt; n”, “ &lt;td&gt;0.00&lt;/td&gt; n”, “ &lt;td&gt;24.93&lt;/td&gt; n”, “ &lt;td&gt;22.86&lt;/td&gt; n”, “ &lt;td&gt;33.06&lt;/td&gt; n”, “ &lt;td&gt;44.25&lt;/td&gt; n”, “ &lt;td&gt;19.47&lt;/td&gt; n”, “ &lt;td&gt;3.12&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;2020&lt;/th&gt; n”, “ &lt;td&gt;25.14&lt;/td&gt; n”, “ &lt;td&gt;2.00&lt;/td&gt; n”, “ &lt;td&gt;0.00&lt;/td&gt; n”, “ &lt;td&gt;0.00&lt;/td&gt; n”, “ &lt;td&gt;0.00&lt;/td&gt; n”, “ &lt;td&gt;0.00&lt;/td&gt; n”, “ &lt;td&gt;0.00&lt;/td&gt; n”, “ &lt;td&gt;76.43&lt;/td&gt; n”, “ &lt;td&gt;80.49&lt;/td&gt; n”, “ &lt;td&gt;41.23&lt;/td&gt; n”, “ &lt;td&gt;56.40&lt;/td&gt; n”, “ &lt;td&gt;30.43&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;2021&lt;/th&gt; n”, “ &lt;td&gt;11.97&lt;/td&gt; n”, “ &lt;td&gt;0.00&lt;/td&gt; n”, “ &lt;td&gt;0.00&lt;/td&gt; n”, “ &lt;td&gt;0.00&lt;/td&gt; n”, “ &lt;td&gt;0.00&lt;/td&gt; n”, “ &lt;td&gt;0.00&lt;/td&gt; n”, “ &lt;td&gt;0.00&lt;/td&gt; n”, “ &lt;td&gt;0.00&lt;/td&gt; n”, “ &lt;td&gt;0.00&lt;/td&gt; n”, “ &lt;td&gt;0.00&lt;/td&gt; n”, “ &lt;td&gt;0.00&lt;/td&gt; n”, “ &lt;td&gt;0.00&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;/tbody&gt; n”, “&lt;/table&gt; n”, “&lt;/div&gt;” ], “text/plain”: [ “Month 1 2 3 4 5 6 7 8 9 10 n”, “Year n”, “2017 0.00 0.00 0.00 0.00 0.00 0.00 37.42 24.54 36.78 35.27 n”, “2018 17.18 56.84 55.44 55.48 42.02 50.95 33.57 20.36 8.97 0.00 n”, “2019 0.00 0.00 4.17 0.00 0.00 0.00 24.93 22.86 33.06 44.25 n”, “2020 25.14 2.00 0.00 0.00 0.00 0.00 0.00 76.43 80.49 41.23 n”, “2021 11.97 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 n”, “ n”, “Month 11 12 n”, “Year n”, “2017 12.68 15.29 n”, “2018 0.00 3.20 n”, “2019 19.47 3.12 n”, “2020 56.40 30.43 n”, “2021 0.00 0.00 “ ] }, “execution_count”: 8, “metadata”: {}, “output_type”: “execute_result” } ], “source”: [ “total_distance = garmin_data.pivot_table(‘Distance’, index=&quot;Year&quot;, columns = ‘Month’, aggfunc=’sum’, fill_value=0, margins=False) n”, “total_distance” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “## Average Distance (miles)” ] }, { “cell_type”: “code”, “execution_count”: 9, “metadata”: {}, “outputs”: [], “source”: [ “avg_distance = np.round(garmin_data.pivot_table(‘Distance’, index=&quot;Year&quot;, columns = ‘Month’, aggfunc=’mean’, fill_value=0, margins=False), 2)” ] }, { “cell_type”: “code”, “execution_count”: 10, “metadata”: {}, “outputs”: [ { “data”: { “text/plain”: [ “(0.0, 82.0)” ] }, “execution_count”: 10, “metadata”: {}, “output_type”: “execute_result” }, { “data”: { “image/png”: “ n”, “text/plain”: [ “&lt;Figure size 480x240 with 1 Axes&gt;” ] }, “metadata”: {}, “output_type”: “display_data” } ], “source”: [ “month = 10 n”, “year = 2020 n”, “ n”, “num_runs.loc[year][month] n”, “avg_pace.loc[year][month] n”, “total_distance.loc[year][month] n”, “avg_distance.loc[year][month] n”, “ n”, “fig, ax = plt.subplots() n”, “ax.scatter(total_distance, avg_pace) n”, “ax.set_ylim([4.2,6.2]) n”, “ax.set_xlim([0,82]) n”, “#avg_pace.loc[year]” ] }, { “cell_type”: “code”, “execution_count”: 11, “metadata”: {}, “outputs”: [ { “data”: { “text/html”: [ “&lt;div&gt; n”, “ n”, “&lt;table border=&quot;1&quot; class=&quot;dataframe&quot;&gt; n”, “ &lt;thead&gt; n”, “ &lt;tr style=&quot;text-align: right;&quot;&gt; n”, “ &lt;th&gt;Time of Day&lt;/th&gt; n”, “ &lt;th&gt;Afternoon&lt;/th&gt; n”, “ &lt;th&gt;Late Afternoon&lt;/th&gt; n”, “ &lt;th&gt;Morning&lt;/th&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;Day of Week&lt;/th&gt; n”, “ &lt;th&gt;&lt;/th&gt; n”, “ &lt;th&gt;&lt;/th&gt; n”, “ &lt;th&gt;&lt;/th&gt; n”, “ &lt;/tr&gt; n”, “ &lt;/thead&gt; n”, “ &lt;tbody&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;Friday&lt;/th&gt; n”, “ &lt;td&gt;2.83&lt;/td&gt; n”, “ &lt;td&gt;1.58&lt;/td&gt; n”, “ &lt;td&gt;2.13&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;Monday&lt;/th&gt; n”, “ &lt;td&gt;2.12&lt;/td&gt; n”, “ &lt;td&gt;2.72&lt;/td&gt; n”, “ &lt;td&gt;2.06&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;Saturday&lt;/th&gt; n”, “ &lt;td&gt;3.40&lt;/td&gt; n”, “ &lt;td&gt;4.46&lt;/td&gt; n”, “ &lt;td&gt;2.93&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;Sunday&lt;/th&gt; n”, “ &lt;td&gt;3.31&lt;/td&gt; n”, “ &lt;td&gt;2.13&lt;/td&gt; n”, “ &lt;td&gt;4.03&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;Thursday&lt;/th&gt; n”, “ &lt;td&gt;1.48&lt;/td&gt; n”, “ &lt;td&gt;2.85&lt;/td&gt; n”, “ &lt;td&gt;2.23&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;Tuesday&lt;/th&gt; n”, “ &lt;td&gt;0.00&lt;/td&gt; n”, “ &lt;td&gt;2.45&lt;/td&gt; n”, “ &lt;td&gt;2.49&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;tr&gt; n”, “ &lt;th&gt;Wednesday&lt;/th&gt; n”, “ &lt;td&gt;0.00&lt;/td&gt; n”, “ &lt;td&gt;2.47&lt;/td&gt; n”, “ &lt;td&gt;1.78&lt;/td&gt; n”, “ &lt;/tr&gt; n”, “ &lt;/tbody&gt; n”, “&lt;/table&gt; n”, “&lt;/div&gt;” ], “text/plain”: [ “Time of Day Afternoon Late Afternoon Morning n”, “Day of Week n”, “Friday 2.83 1.58 2.13 n”, “Monday 2.12 2.72 2.06 n”, “Saturday 3.40 4.46 2.93 n”, “Sunday 3.31 2.13 4.03 n”, “Thursday 1.48 2.85 2.23 n”, “Tuesday 0.00 2.45 2.49 n”, “Wednesday 0.00 2.47 1.78” ] }, “execution_count”: 11, “metadata”: {}, “output_type”: “execute_result” } ], “source”: [ “np.round(garmin_data.pivot_table(‘Distance’, index=&quot;Day of Week&quot;, columns = ‘Time of Day’, aggfunc=’mean’, fill_value=0, margins=False), 2) n”, “ n” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “# Potential Questions to Ask n”, “ n”, “## Which day &amp; time am I the fastest? n”, “ n”, “## Am I most effective in the morning or afternoon? n”, “ n”, “## How many calories to I burn per minute, while running? n”, “ n”, “## If I were to continue my trend of faster pace, when could I run a 7 minute mile? n”, “ n”, “## What is the relationship between weekly mileage and weekly pace change? n”, “ n” ] }, { “cell_type”: “code”, “execution_count”: 12, “metadata”: {}, “outputs”: [ { “ename”: “NameError”, “evalue”: “name ‘data’ is not defined”, “output_type”: “error”, “traceback”: [ “ u001b[0;31m————————————————————————— u001b[0m”, “ u001b[0;31mNameError u001b[0m Traceback (most recent call last)”, “ u001b[0;32m u001b[0m in u001b[0;36m u001b[0;34m u001b[0m n u001b[1;32m 1 u001b[0m u001b[0msns u001b[0m u001b[0;34m. u001b[0m u001b[0mset u001b[0m u001b[0;34m( u001b[0m u001b[0;34m) u001b[0m u001b[0;34m u001b[0m u001b[0m n u001b[0;32m-&gt; 2 u001b[0;31m u001b[0mdata u001b[0m u001b[0;34m. u001b[0m u001b[0mpivot_table u001b[0m u001b[0;34m( u001b[0m u001b[0;34m&#39;Title&#39; u001b[0m u001b[0;34m, u001b[0m u001b[0mindex u001b[0m u001b[0;34m= u001b[0m u001b[0;34m &quot;Day of Week &quot; u001b[0m u001b[0;34m, u001b[0m u001b[0mcolumns u001b[0m u001b[0;34m= u001b[0m u001b[0;34m &quot;Time of Day &quot; u001b[0m u001b[0;34m, u001b[0m u001b[0maggfunc u001b[0m u001b[0;34m= u001b[0m u001b[0;34m&#39;count&#39; u001b[0m u001b[0;34m) u001b[0m u001b[0;34m. u001b[0m u001b[0mplot u001b[0m u001b[0;34m. u001b[0m u001b[0mbar u001b[0m u001b[0;34m( u001b[0m u001b[0;34m) u001b[0m u001b[0;34m u001b[0m u001b[0m n u001b[0m u001b[1;32m 3 u001b[0m u001b[0mdata u001b[0m u001b[0;34m. u001b[0m u001b[0mpivot_table u001b[0m u001b[0;34m( u001b[0m u001b[0;34m&#39;Title&#39; u001b[0m u001b[0;34m, u001b[0m u001b[0mindex u001b[0m u001b[0;34m= u001b[0m u001b[0;34m &quot;Year &quot; u001b[0m u001b[0;34m, u001b[0m u001b[0mcolumns u001b[0m u001b[0;34m= u001b[0m u001b[0;34m &quot;Day of Week &quot; u001b[0m u001b[0;34m, u001b[0m u001b[0maggfunc u001b[0m u001b[0;34m= u001b[0m u001b[0;34m&#39;count&#39; u001b[0m u001b[0;34m) u001b[0m u001b[0;34m u001b[0m u001b[0m n u001b[1;32m 4 u001b[0m u001b[0mplot u001b[0m u001b[0;34m. u001b[0m u001b[0msc u001b[0m u001b[0;34m u001b[0m u001b[0m n u001b[1;32m 5 u001b[0m u001b[0;31m### Which day do I run the most? u001b[0m u001b[0;34m u001b[0m u001b[0;34m u001b[0m u001b[0m n&quot;, &quot; u001b[0;31mNameError u001b[0m: name &#39;data&#39; is not defined&quot; ] } ], &quot;source&quot;: [ &quot; n&quot;, &quot;sns.set() n&quot;, &quot;data.pivot_table(&#39;Title&#39;, index= &quot;Day of Week &quot;, columns= &quot;Time of Day &quot;, aggfunc=&#39;count&#39;).plot.bar() n&quot;, &quot;data.pivot_table(&#39;Title&#39;, index= &quot;Year &quot;, columns= &quot;Day of Week &quot;, aggfunc=&#39;count&#39;) n&quot;, &quot;plot.sc n&quot;, &quot;### Which day do I run the most? n&quot;, &quot; n&quot;, &quot;#data.pivot_table(&#39;Avg Pace&#39;, index=data[&#39;Year&#39;], columns= &quot;Time of Day &quot;, aggfunc=&#39;mean&#39;)&quot; ] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;execution_count&quot;: null, &quot;metadata&quot;: {}, &quot;outputs&quot;: [], &quot;source&quot;: [ &quot;garmin_data.pivot_table(&#39;Title&#39;, index= &quot;Year &quot;, columns = &#39;Month&#39;, aggfunc=&#39;count&#39;, fill_value=0)&quot; ] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;execution_count&quot;: null, &quot;metadata&quot;: {}, &quot;outputs&quot;: [], &quot;source&quot;: [ &quot;#3 main periods of running recorded in Garmin. n&quot;, &quot;# 7/2017 - 11/2018 n&quot;, &quot;period_1 = [datetime.date(2017, 7,1), datetime.date(2018,10,13)] n&quot;, &quot;# ax.set_xlim([datetime.date(2017, 7,1), datetime.date(2018,11,1)]) n&quot;, &quot;# 7/2019 - 12/2019 n&quot;, &quot;period_2 = [datetime.date(2019, 7,1), datetime.date(2019,12,1)] n&quot;, &quot;# ax.set_xlim([datetime.date(2019, 7,1), datetime.date(2019,12,1)]) n&quot;, &quot;# 1/2020 - 12/2020 n&quot;, &quot;period_3 = [datetime.date(2020, 8,1), dt.datetime.now()] n&quot;, &quot;#ax.set_xlim([datetime.date(2020, 8,1), datetime.date(2020,11,1)]) n&quot; ] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;execution_count&quot;: null, &quot;metadata&quot;: {}, &quot;outputs&quot;: [], &quot;source&quot;: [] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;execution_count&quot;: null, &quot;metadata&quot;: {}, &quot;outputs&quot;: [], &quot;source&quot;: [ &quot;data.pivot_table(&#39;Distance&#39;, index= &quot;Year &quot;, columns = &#39;Month&#39;, aggfunc=&#39;sum&#39;, fill_value=0)&quot; ] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;execution_count&quot;: null, &quot;metadata&quot;: {}, &quot;outputs&quot;: [], &quot;source&quot;: [ &quot;data.pivot_table(&#39;Avg Pace&#39;, index= &quot;Year &quot;, columns = &#39;Month&#39;, aggfunc=&#39;mean&#39;, fill_value=0)&quot; ] }, { &quot;cell_type&quot;: &quot;code&quot;, &quot;execution_count&quot;: null, &quot;metadata&quot;: {}, &quot;outputs&quot;: [], &quot;source&quot;: [] } ], &quot;metadata&quot;: { &quot;kernelspec&quot;: { &quot;display_name&quot;: &quot;Python 3&quot;, &quot;language&quot;: &quot;python&quot;, &quot;name&quot;: &quot;python3&quot; }, &quot;language_info&quot;: { &quot;codemirror_mode&quot;: { &quot;name&quot;: &quot;ipython&quot;, &quot;version&quot;: 3 }, &quot;file_extension&quot;: &quot;.py&quot;, &quot;mimetype&quot;: &quot;text/x-python&quot;, &quot;name&quot;: &quot;python&quot;, &quot;nbconvert_exporter&quot;: &quot;python&quot;, &quot;pygments_lexer&quot;: &quot;ipython3&quot;, &quot;version&quot;: &quot;3.7.0&quot; } }, &quot;nbformat&quot;: 4, &quot;nbformat_minor&quot;: 4 } .",
            "url": "https://blog.kblanchard.com/2020/11/18/Garmin-Running-Data.ipynb",
            "relUrl": "/2020/11/18/Garmin-Running-Data.ipynb",
            "date": " • Nov 18, 2020"
        }
        
    
  

  
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page9": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://blog.kblanchard.com/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}