{
  
    
        "post0": {
            "title": "Garmin Running Data",
            "content": "I have a very simple data exercise I’d like to accomplish as I start my path towards becoming a Data Scientist. I want to take a look at my own data that I’ve collected with Garmin and see if I can pull any insights from it around my running habits and how I can become a more effective runner. . If I’m able to come to some conclusions, that could be an interesting case study for the value of data. At the very least, I’ll be putting a comedic foot forward by putting my own running statistics on display. . For the purpose of this data study, I’m trying to use what I have immediately available as I’m generally pretty familiar with describing datasets using tools such as Excel (via Pivot Tables), Tableau + SQL or, in a previous life, leveraging IDL &amp; MATLAB. The concepts of exploring a dataset are common to me but right now I’m focused on learning the languages of R &amp; Python. . This writing exercise, is focused on my conclusions. If you’re interested in my process of analysis and the basics of how shaped the data, collected it, and drawn these conclusions – let me know. I’ll be doing my best to explain any statistical concepts I’m using (since I’ll be learning those, too). . I’m collecting my data directly from Garmin’s website – https://connect.garmin.com/modern/activities, filtering specifically for my running activities. Garmin allows you to export the data directly to .csv. . My goal with looking at this data is to understand the following: . When was I the best runner? | How can I become a better runner? | . Understanding &amp; Setting up the Data . First things first, let&#39;s load the file. . data.isnull().sum() . Activity Type 0 Date 0 Favorite 0 Title 0 Distance 0 .. Surface Interval 0 Decompression 0 Best Lap Time 0 Number of Laps 0 Max Temp 0 Length: 30, dtype: int64 . data.info() #sample of data data.sample(5) . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 369 entries, 0 to 368 Data columns (total 30 columns): # Column Non-Null Count Dtype -- -- 0 Activity Type 369 non-null object 1 Date 369 non-null object 2 Favorite 369 non-null bool 3 Title 369 non-null object 4 Distance 369 non-null float64 5 Calories 369 non-null object 6 Time 369 non-null object 7 Avg HR 369 non-null object 8 Max HR 369 non-null object 9 Aerobic TE 369 non-null object 10 Avg Run Cadence 369 non-null object 11 Max Run Cadence 369 non-null object 12 Avg Pace 369 non-null object 13 Best Pace 369 non-null object 14 Elev Gain 369 non-null object 15 Elev Loss 369 non-null object 16 Avg Stride Length 369 non-null float64 17 Avg Vertical Ratio 369 non-null float64 18 Avg Vertical Oscillation 369 non-null float64 19 Training Stress Score® 369 non-null float64 20 Grit 369 non-null float64 21 Flow 369 non-null float64 22 Climb Time 369 non-null object 23 Bottom Time 369 non-null object 24 Min Temp 369 non-null float64 25 Surface Interval 369 non-null object 26 Decompression 369 non-null object 27 Best Lap Time 369 non-null object 28 Number of Laps 369 non-null object 29 Max Temp 369 non-null float64 dtypes: bool(1), float64(9), object(20) memory usage: 84.1+ KB . Activity Type Date Favorite Title Distance Calories Time ... Bottom Time Min Temp Surface Interval Decompression Best Lap Time Number of Laps Max Temp . 204 Running | 2018-05-30 07:07:01 | False | Santa Ana Running | 1.15 | 146 | 00:11:33 | ... | 0:00 | 0.0 | 0:00 | No | 00:00.00 | 1 | 0.0 | . 319 Running | 2017-12-11 17:07:28 | False | Running | 2.06 | 254 | 00:22:28 | ... | 0:00 | 0.0 | 0:00 | No | 00:00.00 | 1 | 0.0 | . 120 Running | 2019-09-08 09:53:05 | False | Santa Ana Running | 2.10 | 291 | 00:23:39 | ... | 0:00 | 0.0 | 0:00 | No | 00:00.00 | 1 | 0.0 | . 201 Running | 2018-06-02 13:26:30 | False | Santa Ana Running | 2.08 | 298 | 00:22:59 | ... | 0:00 | 0.0 | 0:00 | No | 00:00.00 | 1 | 0.0 | . 254 Running | 2018-03-28 07:19:40 | False | Santa Ana Running | 1.08 | 132 | 00:10:31 | ... | 0:00 | 0.0 | 0:00 | No | 00:00.00 | 1 | 0.0 | . 5 rows × 30 columns . def clean_na(val, pace=False): if pace == True: newval = val.replace(&quot;--&quot;, &quot;99:99&quot;) else: newval = val.replace(&quot;--&quot;, &#39;0&#39;).replace(&#39;,&#39;,&#39;&#39;) return str(newval) def time_of_day(date): morn_start = dt.time(6,00) afternoon_start = dt.time(12,00) late_afternoon_start = dt.time(15,00) evening_start = dt.time(18,00) time_of_run = dt.datetime.time(date) if evening_start &lt;= time_of_run &lt; morn_start: return &quot;Evening&quot; elif morn_start &lt;= time_of_run &lt; afternoon_start: return &quot;Morning&quot; elif afternoon_start &lt;= time_of_run &lt; late_afternoon_start: return &quot;Afternoon&quot; elif late_afternoon_start &lt;= time_of_run &lt; evening_start: return &quot;Late Afternoon&quot; #adjust column names data.rename(columns = {&#39;Time&#39; : &#39;Minutes Elapsed&#39;}, inplace= True) #fix data types data[&#39;Date&#39;] = data[&#39;Date&#39;].astype(&#39;datetime64&#39;) data[&#39;Day of Week&#39;] = data[&#39;Date&#39;].dt.day_name() data[&#39;Year&#39;] = data[&#39;Date&#39;].apply(lambda x: x.year) data[&#39;Month&#39;] = data[&#39;Date&#39;].apply(lambda x: x.month) data[&#39;Favorite&#39;] = data[&#39;Favorite&#39;].astype(&#39;bool&#39;) data[&#39;Calories&#39;] = data[&#39;Calories&#39;].str.replace(&#39;,&#39;,&#39;&#39;) data[&#39;Calories&#39;] = data[&#39;Calories&#39;].apply(clean_na).astype(int) #converting my total elapsed time to minutes, rounding. data[&#39;Minutes Elapsed&#39;] = data[&#39;Minutes Elapsed&#39;].str.split(&#39;:&#39;).apply(lambda x: int(x[0]) * 60 + int(x[1]) + round(float(x[2])/60,1)) data[&#39;Avg HR&#39;] = data[&#39;Avg HR&#39;].apply(clean_na).astype(int) data[&#39;Max HR&#39;] = data[&#39;Max HR&#39;].apply(clean_na).astype(int) data[&#39;Aerobic TE&#39;] = data[&#39;Aerobic TE&#39;].apply(clean_na).astype(float) data[&#39;Avg Run Cadence&#39;] = data[&#39;Avg Run Cadence&#39;].apply(clean_na).astype(int) data[&#39;Max Run Cadence&#39;] = data[&#39;Max Run Cadence&#39;].apply(clean_na).astype(int) #convert pace to mph data[&#39;Avg Pace&#39;] = data[&#39;Avg Pace&#39;].apply(clean_na, pace=True).str.split(&#39;:&#39;).apply(lambda x: 60/(int(x[0]) + int(x[1])/60)) data[&#39;Best Pace&#39;] = data[&#39;Best Pace&#39;].apply(clean_na, pace=True).str.split(&#39;:&#39;).apply(lambda x: 60/(int(x[0]) + int(x[1])/60)) data[&#39;Elev Gain&#39;] = data[&#39;Elev Gain&#39;].apply(clean_na).astype(int) data[&#39;Elev Loss&#39;] = data[&#39;Elev Loss&#39;].apply(clean_na).astype(int) data[&#39;Climb Time&#39;] = data[&#39;Climb Time&#39;].str.split(&#39;:&#39;).apply(lambda x: int(x[0]) + float(x[1])/60) data[&#39;Time of Day&#39;] = data[&#39;Date&#39;].apply(time_of_day) data = data.drop(columns=[&#39;Favorite&#39;, &#39;Avg Vertical Ratio&#39;, &#39;Avg Vertical Oscillation&#39;, &#39;Training Stress Score®&#39;, &#39;Grit&#39;, &#39;Flow&#39;,&#39;Bottom Time&#39;, &#39;Min Temp&#39;, &#39;Surface Interval&#39;, &#39;Decompression&#39;, &#39;Best Lap Time&#39;, &#39;Number of Laps&#39;, &#39;Max Temp&#39;]) data.info() data.sample(5) . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 369 entries, 0 to 368 Data columns (total 21 columns): # Column Non-Null Count Dtype -- -- 0 Activity Type 369 non-null object 1 Date 369 non-null datetime64[ns] 2 Title 369 non-null object 3 Distance 369 non-null float64 4 Calories 369 non-null int64 5 Minutes Elapsed 369 non-null float64 6 Avg HR 369 non-null int64 7 Max HR 369 non-null int64 8 Aerobic TE 369 non-null float64 9 Avg Run Cadence 369 non-null int64 10 Max Run Cadence 369 non-null int64 11 Avg Pace 369 non-null float64 12 Best Pace 369 non-null float64 13 Elev Gain 369 non-null int64 14 Elev Loss 369 non-null int64 15 Avg Stride Length 369 non-null float64 16 Climb Time 369 non-null float64 17 Day of Week 369 non-null object 18 Year 369 non-null int64 19 Month 369 non-null int64 20 Time of Day 288 non-null object dtypes: datetime64[ns](1), float64(7), int64(9), object(4) memory usage: 60.7+ KB . Activity Type Date Title Distance Calories Minutes Elapsed Avg HR ... Elev Loss Avg Stride Length Climb Time Day of Week Year Month Time of Day . 115 Running | 2019-09-16 05:28:42 | Santa Ana Running | 2.07 | 282 | 22.9 | 151 | ... | 10 | 0.87 | 22.900000 | Monday | 2019 | 9 | None | . 0 Running | 2020-11-15 06:50:57 | Anaheim - Long Easy Run | 4.65 | 630 | 50.0 | 151 | ... | 66 | 0.97 | 50.033333 | Sunday | 2020 | 11 | Morning | . 108 Running | 2019-10-01 05:32:39 | Santa Ana Running | 2.09 | 290 | 23.6 | 149 | ... | 7 | 0.87 | 23.566667 | Tuesday | 2019 | 10 | None | . 232 Running | 2018-04-20 07:10:10 | Santa Ana Running | 1.16 | 143 | 11.0 | 146 | ... | 10 | 1.01 | 11.033333 | Friday | 2018 | 4 | Morning | . 294 Running | 2018-02-14 07:04:26 | Santa Ana Running | 2.10 | 246 | 19.6 | 154 | ... | 7 | 1.06 | 19.633333 | Wednesday | 2018 | 2 | Morning | . 5 rows × 21 columns . data.describe() . Distance Calories Minutes Elapsed Avg HR Max HR Aerobic TE Avg Run Cadence ... Best Pace Elev Gain Elev Loss Avg Stride Length Climb Time Year Month . count 369.000000 | 369.000000 | 369.000000 | 369.000000 | 369.000000 | 369.000000 | 369.000000 | ... | 369.000000 | 369.000000 | 369.00000 | 369.000000 | 369.000000 | 369.000000 | 369.000000 | . mean 2.470244 | 331.208672 | 27.203794 | 140.086721 | 155.108401 | 1.947696 | 138.902439 | ... | 8.396128 | 27.094851 | 29.96206 | 0.783848 | 24.057037 | 2018.441734 | 6.875339 | . std 1.265270 | 174.437566 | 15.208155 | 37.266127 | 41.480930 | 1.375366 | 57.342708 | ... | 5.589009 | 80.188089 | 93.31360 | 0.331930 | 11.926579 | 0.959786 | 3.058428 | . min 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | ... | 0.596125 | 0.000000 | 0.00000 | 0.000000 | 0.040000 | 2017.000000 | 1.000000 | . 25% 1.820000 | 240.000000 | 19.200000 | 145.000000 | 158.000000 | 0.000000 | 154.000000 | ... | 6.326889 | 5.000000 | 7.00000 | 0.850000 | 14.550000 | 2018.000000 | 4.000000 | . 50% 2.090000 | 285.000000 | 23.000000 | 149.000000 | 165.000000 | 2.400000 | 164.000000 | ... | 6.716418 | 10.000000 | 11.00000 | 0.900000 | 22.566667 | 2018.000000 | 8.000000 | . 75% 3.170000 | 416.000000 | 34.100000 | 154.000000 | 171.000000 | 3.000000 | 166.000000 | ... | 7.578947 | 16.000000 | 16.00000 | 0.950000 | 28.916667 | 2019.000000 | 9.000000 | . max 9.450000 | 1135.000000 | 136.600000 | 173.000000 | 196.000000 | 4.500000 | 170.000000 | ... | 54.545455 | 787.000000 | 1278.00000 | 1.150000 | 58.366667 | 2020.000000 | 12.000000 | . 8 rows × 16 columns . plt.scatter(data[&#39;Distance&#39;], data[&#39;Avg HR&#39;]) . &lt;matplotlib.collections.PathCollection at 0x129a94710&gt; . pd.crosstab(round(data[&#39;Distance&#39;],0), data[&#39;Avg HR&#39;]).style.background_gradient(cmap=&#39;summer_r&#39;) . Avg HR 0 56 90 114 118 126 129 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 165 168 173 . Distance . 0.0 0 | 1 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 1.0 0 | 0 | 0 | 0 | 0 | 0 | 1 | 2 | 1 | 1 | 2 | 2 | 3 | 1 | 5 | 2 | 6 | 9 | 8 | 10 | 6 | 8 | 3 | 3 | 2 | 1 | 2 | 0 | 2 | 0 | 0 | 0 | 1 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | . 2.0 14 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 1 | 3 | 2 | 3 | 3 | 2 | 5 | 10 | 9 | 9 | 5 | 9 | 12 | 6 | 6 | 6 | 13 | 3 | 5 | 5 | 6 | 4 | 2 | 7 | 3 | 1 | 0 | 1 | 0 | . 3.0 5 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 1 | 0 | 2 | 1 | 1 | 4 | 0 | 4 | 6 | 6 | 3 | 3 | 2 | 3 | 3 | 2 | 2 | 4 | 5 | 0 | 1 | 0 | 0 | 0 | 0 | . 4.0 2 | 0 | 0 | 1 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 3 | 0 | 0 | 3 | 2 | 0 | 7 | 7 | 5 | 3 | 0 | 2 | 2 | 2 | 1 | 1 | 0 | 3 | 0 | 2 | 1 | 0 | 0 | . 5.0 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 1 | 2 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | . 6.0 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 1 | 0 | 0 | 0 | 1 | 0 | 1 | 0 | 2 | 0 | 1 | 0 | 1 | 0 | 0 | 0 | 1 | . 7.0 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 2 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . 9.0 0 | 0 | 0 | 0 | 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . corrmat = data.corr() fig = plt.figure(figsize = (10,10)) sns.heatmap(corrmat,vmax = 1,square = True,annot = True,vmin = -1) plt.show() . sns.displot(data[&#39;Minutes Elapsed&#39;], kde=True) data.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 369 entries, 0 to 368 Data columns (total 21 columns): # Column Non-Null Count Dtype -- -- 0 Activity Type 369 non-null object 1 Date 369 non-null datetime64[ns] 2 Title 369 non-null object 3 Distance 369 non-null float64 4 Calories 369 non-null int64 5 Minutes Elapsed 369 non-null float64 6 Avg HR 369 non-null int64 7 Max HR 369 non-null int64 8 Aerobic TE 369 non-null float64 9 Avg Run Cadence 369 non-null int64 10 Max Run Cadence 369 non-null int64 11 Avg Pace 369 non-null float64 12 Best Pace 369 non-null float64 13 Elev Gain 369 non-null int64 14 Elev Loss 369 non-null int64 15 Avg Stride Length 369 non-null float64 16 Climb Time 369 non-null float64 17 Day of Week 369 non-null object 18 Year 369 non-null int64 19 Month 369 non-null int64 20 Time of Day 288 non-null object dtypes: datetime64[ns](1), float64(7), int64(9), object(4) memory usage: 60.7+ KB . Potential Questions to Ask . Which day &amp; time am I the fastest? . Am I most effective in the morning or afternoon? . How many calories to I burn per minute, while running? . If I were to continue my trend of faster pace, when could I run a 7 minute mile? . What is the relationship between weekly mileage and weekly pace change? . sns.set() data.pivot_table(&#39;Title&#39;, index=&quot;Day of Week&quot;, columns=&quot;Time of Day&quot;, aggfunc=&#39;count&#39;).plot.bar() data.pivot_table(&#39;Title&#39;, index=&quot;Year&quot;, columns=&quot;Day of Week&quot;, aggfunc=&#39;count&#39;) plot.sc ### Which day do I run the most? #data.pivot_table(&#39;Avg Pace&#39;, index=data[&#39;Year&#39;], columns=&quot;Time of Day&quot;, aggfunc=&#39;mean&#39;) . NameError Traceback (most recent call last) &lt;ipython-input-209-ae48a06bd7ec&gt; in &lt;module&gt; 2 data.pivot_table(&#39;Title&#39;, index=&#34;Day of Week&#34;, columns=&#34;Time of Day&#34;, aggfunc=&#39;count&#39;).plot.bar() 3 data.pivot_table(&#39;Title&#39;, index=&#34;Year&#34;, columns=&#34;Day of Week&#34;, aggfunc=&#39;count&#39;) -&gt; 4 plot.sc 5 ### Which day do I run the most? 6 NameError: name &#39;plot&#39; is not defined . fig, ax = plt.subplots() ax.plot_date(data[&#39;Date&#39;], data[&#39;Avg Pace&#39;]) fig.autofmt_xdate() #3 main periods of running recorded in Garmin. # 7/2017 - 11/2018 period_1 = [datetime.date(2017, 7,1), datetime.date(2018,10,13)] # ax.set_xlim([datetime.date(2017, 7,1), datetime.date(2018,11,1)]) # 7/2019 - 12/2019 period_2 = [datetime.date(2019, 7,1), datetime.date(2019,12,1)] # ax.set_xlim([datetime.date(2019, 7,1), datetime.date(2019,12,1)]) # 1/2020 - 12/2020 period_3 = [datetime.date(2020, 8,1), dt.datetime.now()] #ax.set_xlim([datetime.date(2020, 8,1), datetime.date(2020,11,1)]) ax.set_xlim(period_3) . data.pivot_table(&#39;Title&#39;, index=&quot;Year&quot;, columns = &#39;Month&#39;, aggfunc=&#39;count&#39;, fill_value=0) . data.pivot_table(&#39;Distance&#39;, index=&quot;Year&quot;, columns = &#39;Month&#39;, aggfunc=&#39;sum&#39;, fill_value=0) . data.pivot_table(&#39;Avg Pace&#39;, index=&quot;Year&quot;, columns = &#39;Month&#39;, aggfunc=&#39;mean&#39;, fill_value=0) .",
            "url": "https://blog.kblanchard.com/jupyter/fitness/2020/11/18/Garmin-Running-Data.html",
            "relUrl": "/jupyter/fitness/2020/11/18/Garmin-Running-Data.html",
            "date": " • Nov 18, 2020"
        }
        
    
  

  
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page9": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://blog.kblanchard.com/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}