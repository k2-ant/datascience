{
  
    
        "post0": {
            "title": "Garmin Year(s) in Review (2017 - 2020)",
            "content": "Very simple exercise in looking at data from my runs that are stored in Garmin. Includes all of my runs up to the end of 2020. . I’m collecting my data directly from Garmin’s website – https://connect.garmin.com/modern/activities, filtering specifically for my running activities. Garmin allows you to export the data directly to .csv. . My goal with looking at this data is to understand the following: . How did I perform in 2020? | What should I aim to improve in 2021? | . The Data . Understanding the Data . First things first, let&#39;s get an idea of what the data looks like. . garmin_data.info(verbose=True) . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 392 entries, 0 to 391 Data columns (total 30 columns): # Column Non-Null Count Dtype -- -- 0 Activity Type 392 non-null object 1 Date 392 non-null object 2 Favorite 392 non-null bool 3 Title 392 non-null object 4 Distance 392 non-null float64 5 Calories 392 non-null object 6 Time 392 non-null object 7 Avg HR 392 non-null object 8 Max HR 392 non-null object 9 Aerobic TE 392 non-null object 10 Avg Run Cadence 392 non-null object 11 Max Run Cadence 392 non-null object 12 Avg Pace 392 non-null object 13 Best Pace 392 non-null object 14 Elev Gain 392 non-null object 15 Elev Loss 392 non-null object 16 Avg Stride Length 392 non-null float64 17 Avg Vertical Ratio 392 non-null float64 18 Avg Vertical Oscillation 392 non-null float64 19 Training Stress Score® 392 non-null float64 20 Grit 392 non-null float64 21 Flow 392 non-null float64 22 Climb Time 392 non-null object 23 Bottom Time 392 non-null object 24 Min Temp 392 non-null float64 25 Surface Interval 392 non-null object 26 Decompression 392 non-null object 27 Best Lap Time 392 non-null object 28 Number of Laps 392 non-null object 29 Max Temp 392 non-null float64 dtypes: bool(1), float64(9), object(20) memory usage: 89.3+ KB . Prep the Data . Looking at the initial review, a lot of these fields are objects when I really want to capture them as integers or floats. There are also some simplified fields I&#39;ll want to have in my analysis: . Year | Month | Day of the Week | Time of Day (Morning, Afternoon, Late Afternoon, Evening) | . In addition, I&#39;ll want to standardize some elements so they are bit easier for me to manage and analyze. . Pace is currently stored as minutes per mile. I will change to miles per hour. | Time is currently stored as HH:MM. I will change this to total elapsed minutes. | . Finally, Garmin does not have null values. In areas where the value is null, Garmin captures it as &quot;--&quot;. I will clean this up and make these null. . This results in the following: . def clean_na(val, pace=False): if pace == True: newval = val.replace(&quot;--&quot;, &quot;99:99&quot;) else: newval = val.replace(&quot;--&quot;, &#39;0&#39;).replace(&#39;,&#39;,&#39;&#39;) return str(newval) #function to determine def time_of_day(date): morn_start = dt.time(6,00) afternoon_start = dt.time(12,00) late_afternoon_start = dt.time(15,00) evening_start = dt.time(18,00) time_of_run = dt.datetime.time(date) if evening_start &lt;= time_of_run &lt; morn_start: return &quot;Evening&quot; elif morn_start &lt;= time_of_run &lt; afternoon_start: return &quot;Morning&quot; elif afternoon_start &lt;= time_of_run &lt; late_afternoon_start: return &quot;Afternoon&quot; elif late_afternoon_start &lt;= time_of_run &lt; evening_start: return &quot;Late Afternoon&quot; #fix data types garmin_data[&#39;Date&#39;] = garmin_data[&#39;Date&#39;].astype(&#39;datetime64&#39;) garmin_data[&#39;Day of Week&#39;] = garmin_data[&#39;Date&#39;].dt.day_name() garmin_data[&#39;Favorite&#39;] = garmin_data[&#39;Favorite&#39;].astype(&#39;bool&#39;) garmin_data[&#39;Calories&#39;] = garmin_data[&#39;Calories&#39;].str.replace(&#39;,&#39;,&#39;&#39;) garmin_data[&#39;Calories&#39;] = garmin_data[&#39;Calories&#39;].apply(clean_na).astype(int) garmin_data[&#39;Avg HR&#39;] = garmin_data[&#39;Avg HR&#39;].apply(clean_na).astype(int) garmin_data[&#39;Max HR&#39;] = garmin_data[&#39;Max HR&#39;].apply(clean_na).astype(int) garmin_data[&#39;Aerobic TE&#39;] = garmin_data[&#39;Aerobic TE&#39;].apply(clean_na).astype(float) garmin_data[&#39;Avg Run Cadence&#39;] = garmin_data[&#39;Avg Run Cadence&#39;].apply(clean_na).astype(int) garmin_data[&#39;Max Run Cadence&#39;] = garmin_data[&#39;Max Run Cadence&#39;].apply(clean_na).astype(int) garmin_data[&#39;Elev Gain&#39;] = garmin_data[&#39;Elev Gain&#39;].apply(clean_na).astype(int) garmin_data[&#39;Elev Loss&#39;] = garmin_data[&#39;Elev Loss&#39;].apply(clean_na).astype(int) #converting my total elapsed time to minutes, rounding &amp; adjust column name garmin_data.rename(columns = {&#39;Time&#39; : &#39;Minutes Elapsed&#39;}, inplace= True) garmin_data[&#39;Minutes Elapsed&#39;] = garmin_data[&#39;Minutes Elapsed&#39;].str.split(&#39;:&#39;).apply(lambda x: int(x[0]) * 60 + int(x[1]) + round(float(x[2])/60,1)) garmin_data[&#39;Climb Time&#39;] = garmin_data[&#39;Climb Time&#39;].str.split(&#39;:&#39;).apply(lambda x: int(x[0]) + float(x[1])/60) #convert pace to mph garmin_data[&#39;Avg Pace&#39;] = garmin_data[&#39;Avg Pace&#39;].apply(clean_na, pace=True).str.split(&#39;:&#39;).apply(lambda x: 60/(int(x[0]) + int(x[1])/60)) garmin_data[&#39;Best Pace&#39;] = garmin_data[&#39;Best Pace&#39;].apply(clean_na, pace=True).str.split(&#39;:&#39;).apply(lambda x: 60/(int(x[0]) + int(x[1])/60)) #get date attributes garmin_data[&#39;Year&#39;] = garmin_data[&#39;Date&#39;].apply(lambda x: x.year) garmin_data[&#39;Month&#39;] = garmin_data[&#39;Date&#39;].apply(lambda x: x.month) garmin_data[&#39;Time of Day&#39;] = garmin_data[&#39;Date&#39;].apply(time_of_day) # clean up unused date garmin_data = garmin_data.drop(columns=[&#39;Favorite&#39;, &#39;Avg Vertical Ratio&#39;, &#39;Avg Vertical Oscillation&#39;, &#39;Training Stress Score®&#39;, &#39;Grit&#39;, &#39;Flow&#39;,&#39;Bottom Time&#39;, &#39;Min Temp&#39;, &#39;Surface Interval&#39;, &#39;Decompression&#39;, &#39;Best Lap Time&#39;, &#39;Number of Laps&#39;, &#39;Max Temp&#39;]) . Let&#39;s take a look at the data again, now that we&#39;ve set it up. . garmin_data.info(verbose=True) . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 392 entries, 0 to 391 Data columns (total 21 columns): # Column Non-Null Count Dtype -- -- 0 Activity Type 392 non-null object 1 Date 392 non-null datetime64[ns] 2 Title 392 non-null object 3 Distance 392 non-null float64 4 Calories 392 non-null int64 5 Minutes Elapsed 392 non-null float64 6 Avg HR 392 non-null int64 7 Max HR 392 non-null int64 8 Aerobic TE 392 non-null float64 9 Avg Run Cadence 392 non-null int64 10 Max Run Cadence 392 non-null int64 11 Avg Pace 392 non-null float64 12 Best Pace 392 non-null float64 13 Elev Gain 392 non-null int64 14 Elev Loss 392 non-null int64 15 Avg Stride Length 392 non-null float64 16 Climb Time 392 non-null float64 17 Day of Week 392 non-null object 18 Year 392 non-null int64 19 Month 392 non-null int64 20 Time of Day 311 non-null object dtypes: datetime64[ns](1), float64(7), int64(9), object(4) memory usage: 64.4+ KB . Looking much better. Now that we have our data set up, let&#39;s dive into some questions that I&#39;m curious about. . What have my running habits looked like over the years? | What has been my average overall pace? | Which time / day / month do I run the most? | Which time / day / month am I most effective? | . Other questions I&#39;m curious about... . How many total calories have I burned? (in pounds) | Has my average heart rate gotten &quot;better&quot; over time? (My hypothesis is that, as I get healthier, I can maintain a faster pace with a lower heart rate) | . Have a lot of other questions.. especially related to &quot;Best Pace&quot; and how reliablem that data is. For example, can I predict which days I&#39;ll have my best pace? . Number of Runs . num_runs = garmin_data.pivot_table(&#39;Title&#39;, index=&quot;Year&quot;, columns = &#39;Month&#39;, aggfunc=&#39;count&#39;, fill_value=0) num_runs.style.background_gradient(cmap=&#39;Blues&#39;) . Month 1 2 3 4 5 6 7 8 9 10 11 12 . Year . 2017 0 | 0 | 0 | 0 | 0 | 0 | 10 | 10 | 11 | 12 | 5 | 7 | . 2018 8 | 25 | 30 | 27 | 21 | 23 | 13 | 10 | 7 | 0 | 0 | 1 | . 2019 0 | 0 | 2 | 0 | 0 | 0 | 13 | 10 | 15 | 25 | 13 | 2 | . 2020 8 | 1 | 0 | 0 | 0 | 0 | 0 | 22 | 20 | 9 | 18 | 10 | . 2021 4 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | . Looking at this, it&#39;s clear where I ran the most. 2018 was a great year.. I do seem to have &quot;periods&quot; of running. . Period 1: July 2017 - September 2018 | Period 2: July 2019 - January 2020 | Period 3: August 2020 - Today | . Looking at this, I&#39;d assume that I was the best runner in Period 1. But let&#39;s look at my data in a different way. Some other metrics that are important to understand: my average pace, my average distance and my monthly distance. . Avg Pace (mph) . avg_pace = np.round(garmin_data.pivot_table(&#39;Avg Pace&#39;, index=&quot;Year&quot;, columns = &#39;Month&#39;, aggfunc=&#39;mean&#39;, fill_value=0, margins=False),2) avg_pace . Month 1 2 3 4 5 6 7 8 9 10 11 12 . Year . 2017 0.00 | 0.00 | 0.00 | 0.0 | 0.00 | 0.00 | 5.32 | 5.60 | 5.63 | 5.32 | 5.59 | 5.26 | . 2018 5.58 | 5.82 | 5.60 | 6.0 | 5.79 | 5.63 | 5.68 | 5.53 | 5.89 | 0.00 | 0.00 | 4.46 | . 2019 0.00 | 0.00 | 4.53 | 0.0 | 0.00 | 0.00 | 5.08 | 5.40 | 5.35 | 5.47 | 5.59 | 5.76 | . 2020 5.06 | 5.48 | 0.00 | 0.0 | 0.00 | 0.00 | 0.00 | 5.06 | 5.36 | 5.64 | 5.69 | 5.49 | . 2021 6.04 | 0.00 | 0.00 | 0.0 | 0.00 | 0.00 | 0.00 | 0.00 | 0.00 | 0.00 | 0.00 | 0.00 | . Total Distance (miles) . total_distance = garmin_data.pivot_table(&#39;Distance&#39;, index=&quot;Year&quot;, columns = &#39;Month&#39;, aggfunc=&#39;sum&#39;, fill_value=0, margins=False) total_distance . Month 1 2 3 4 5 6 7 8 9 10 11 12 . Year . 2017 0.00 | 0.00 | 0.00 | 0.00 | 0.00 | 0.00 | 37.42 | 24.54 | 36.78 | 35.27 | 12.68 | 15.29 | . 2018 17.18 | 56.84 | 55.44 | 55.48 | 42.02 | 50.95 | 33.57 | 20.36 | 8.97 | 0.00 | 0.00 | 3.20 | . 2019 0.00 | 0.00 | 4.17 | 0.00 | 0.00 | 0.00 | 24.93 | 22.86 | 33.06 | 44.25 | 19.47 | 3.12 | . 2020 25.14 | 2.00 | 0.00 | 0.00 | 0.00 | 0.00 | 0.00 | 76.43 | 80.49 | 41.23 | 56.40 | 30.43 | . 2021 11.97 | 0.00 | 0.00 | 0.00 | 0.00 | 0.00 | 0.00 | 0.00 | 0.00 | 0.00 | 0.00 | 0.00 | . Average Distance (miles) . avg_distance = np.round(garmin_data.pivot_table(&#39;Distance&#39;, index=&quot;Year&quot;, columns = &#39;Month&#39;, aggfunc=&#39;mean&#39;, fill_value=0, margins=False), 2) . month = 10 year = 2020 num_runs.loc[year][month] avg_pace.loc[year][month] total_distance.loc[year][month] avg_distance.loc[year][month] fig, ax = plt.subplots() ax.scatter(total_distance, avg_pace) ax.set_ylim([4.2,6.2]) ax.set_xlim([0,82]) #avg_pace.loc[year] . (0.0, 82.0) . np.round(garmin_data.pivot_table(&#39;Distance&#39;, index=&quot;Day of Week&quot;, columns = &#39;Time of Day&#39;, aggfunc=&#39;mean&#39;, fill_value=0, margins=False), 2) . Time of Day Afternoon Late Afternoon Morning . Day of Week . Friday 2.83 | 1.58 | 2.13 | . Monday 2.12 | 2.72 | 2.06 | . Saturday 3.40 | 4.46 | 2.93 | . Sunday 3.31 | 2.13 | 4.03 | . Thursday 1.48 | 2.85 | 2.23 | . Tuesday 0.00 | 2.45 | 2.49 | . Wednesday 0.00 | 2.47 | 1.78 | . Potential Questions to Ask . Which day &amp; time am I the fastest? . Am I most effective in the morning or afternoon? . How many calories to I burn per minute, while running? . If I were to continue my trend of faster pace, when could I run a 7 minute mile? . What is the relationship between weekly mileage and weekly pace change? . sns.set() data.pivot_table(&#39;Title&#39;, index=&quot;Day of Week&quot;, columns=&quot;Time of Day&quot;, aggfunc=&#39;count&#39;).plot.bar() data.pivot_table(&#39;Title&#39;, index=&quot;Year&quot;, columns=&quot;Day of Week&quot;, aggfunc=&#39;count&#39;) plot.sc ### Which day do I run the most? #data.pivot_table(&#39;Avg Pace&#39;, index=data[&#39;Year&#39;], columns=&quot;Time of Day&quot;, aggfunc=&#39;mean&#39;) . NameError Traceback (most recent call last) &lt;ipython-input-12-ae48a06bd7ec&gt; in &lt;module&gt; 1 sns.set() -&gt; 2 data.pivot_table(&#39;Title&#39;, index=&#34;Day of Week&#34;, columns=&#34;Time of Day&#34;, aggfunc=&#39;count&#39;).plot.bar() 3 data.pivot_table(&#39;Title&#39;, index=&#34;Year&#34;, columns=&#34;Day of Week&#34;, aggfunc=&#39;count&#39;) 4 plot.sc 5 ### Which day do I run the most? NameError: name &#39;data&#39; is not defined . garmin_data.pivot_table(&#39;Title&#39;, index=&quot;Year&quot;, columns = &#39;Month&#39;, aggfunc=&#39;count&#39;, fill_value=0) . # 7/2017 - 11/2018 period_1 = [datetime.date(2017, 7,1), datetime.date(2018,10,13)] # ax.set_xlim([datetime.date(2017, 7,1), datetime.date(2018,11,1)]) # 7/2019 - 12/2019 period_2 = [datetime.date(2019, 7,1), datetime.date(2019,12,1)] # ax.set_xlim([datetime.date(2019, 7,1), datetime.date(2019,12,1)]) # 1/2020 - 12/2020 period_3 = [datetime.date(2020, 8,1), dt.datetime.now()] #ax.set_xlim([datetime.date(2020, 8,1), datetime.date(2020,11,1)]) . data.pivot_table(&#39;Distance&#39;, index=&quot;Year&quot;, columns = &#39;Month&#39;, aggfunc=&#39;sum&#39;, fill_value=0) . data.pivot_table(&#39;Avg Pace&#39;, index=&quot;Year&quot;, columns = &#39;Month&#39;, aggfunc=&#39;mean&#39;, fill_value=0) .",
            "url": "https://blog.kblanchard.com/jupyter/fitness/2020/11/18/Garmin-Running-Data.html",
            "relUrl": "/jupyter/fitness/2020/11/18/Garmin-Running-Data.html",
            "date": " • Nov 18, 2020"
        }
        
    
  

  
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page9": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://blog.kblanchard.com/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}